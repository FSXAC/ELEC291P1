0000              1   ;LIT SOLDER OVEN CONTROLLER
0000              2   ; AUTHOR:   SCOTT BEAULIEU (no contributions yet)
0000              3   ;                        GEOFF GOODWIN
0000              4   ;                        MUCHEN HE
0000              5   ;                        LARRY LIU
0000              6   ;                        LUFEI LIU
0000              7   ;                        WENOA TEVES
0000              8   ; VERSION:       0
0000              9   ; LAST REVISION:         2017-02-05
0000             10   ; http:;i.imgur.com/7wOfG4U.gif
0000             11   
0000             12   
0000             13   org 0x0000
0000 020501      14       ljmp    setup
0003             15   ; org 0x000B
0003             16   ;     ljmp    T0_ISR
002B             17   org 0x002B
002B 020409      18       ljmp    T2_ISR
002E             19   
002E             20   ; standard library
                 22   $LIST
                 -1   $include(macros.inc)
002E              1   ;===SLEEP===
                  2   sleep mac
                  3   	push   AR2
                  4   	mov    R2,     %0
                  5   	lcall  ?sleep
                  6   	pop    AR2
                  7   endmac
002E              8   ?sleep:
002E C000         9       push    AR0
0030 C001        10       push    AR1
0032 792D        11   L3: mov     R1,     #45
0034 78A6        12   L2: mov     R0,     #166
0036 D8FE        13   L1: djnz    R0,     L1 ; 3 cycles->3*45.21123ns*166=22.51519us
0038 D9FA        14       djnz    R1,     L2 ; 22.51519us*45=1.013ms
003A DAF6        15       djnz    R2,     L3 ; number of millisecons to wait passed in R2
003C D001        16       pop     AR1
003E D000        17       pop     AR0
0040 22          18       ret
0041             19   
0041             20   ;===SEND BCD VIA SPI===
0041             21   ; putBCD mac
0041             22   ;     push    AR0
0041             23   ;     mov     R0,     %0
0041             24   ;     lcall   ?putBCD
0041             25   ;     pop     AR0
0041             26   ; endmac
0041             27   ; ?putBCD:
0041             28   ;     push    ACC
0041             29   ;     ; Write most significant digit
0041             30   ;     mov     a,  R0
0041             31   ;     swap    a
0041             32   ;     anl     a,  #0fh
0041             33   ;     orl     a,  #30h
0041             34   ;     lcall   putChar
0041             35   ;     ; write least significant digit
0041             36   ;     mov     a,  R0
0041             37   ;     anl     a,  #0fh
0041             38   ;     orl     a,  #30h
0041             39   ;     lcall   putChar
0041             40   ;     pop     acc
0041             41   ;     ret
0041             42   ; ; === HELPER FUNCTIONS FOR PRINT SPI
0041             43   ; ; send character using serial port
0041             44   ; putChar:
0041             45   ;     jnb     TI,     putchar
0041             46   ;     clr     TI
0041             47   ;     mov     SBUF,   a
0041             48   ;     ret
0041             49   ;
0041             50   ; ; send a string using serial port
0041             51   ; putString:
0041             52   ;     clr     a
0041             53   ;     movc    a,  @a+dptr
0041             54   ;     jz      putString_return
0041             55   ;     lcall   putChar
0041             56   ;     inc     dptr
0041             57   ;     sjmp    putString
0041             58   ; putString_return:
0041             59   ;     ret
0041             60   
0041             61   ;===DISPLAY TO LED BAR===
0041             62   ; barLED mac
0041             63   ;     push    ACC
0041             64   ;     push    AR0
0041             65   ;     mov     R0,     %0
0041             66   ;     mov     a,      #8
0041             67   ;     subb    a,      R0
0041             68   ;     lcall   ?barLED
0041             69   ;     pop     AR0
0041             70   ;     pop     ACC
0041             71   ; endmac
0041             72   ; ?barLED:
0041             73   ;     clr     LED_CLR
0041             74   ;     clr     LED_CLK
0041             75   ;     clr     LED_LATCH
0041             76   ;     setb    LED_DATA
0041             77   ;     setb    LED_CLR
0041             78   ; barLED_1:
0041             79   ;     cpl     LED_CLK
0041             80   ;     cpl     LED_CLK
0041             81   ;     djnz    R0, barLED_1
0041             82   ;
0041             83   ;     mov     R0, a
0041             84   ;     ; inc     R0
0041             85   ;     clr     LED_DATA
0041             86   ;     jz      barLED_end
0041             87   ; barLED_2:
0041             88   ;     cpl     LED_CLK
0041             89   ;     cpl     LED_CLK
0041             90   ;     djnz    R0, barLED_2
0041             91   ; barLED_end:
0041             92   ;     setb    LED_LATCH
0041             93   ;     ret
0041             94   
0041             95   ; -------------------------;
0041             96   ; Increment Macro                   ;
0041             97   ; -------------------------;
                 98   increment_BCD mac
                 99       push    ACC
                100       mov     a,      %0
                101       add     a,      %1
                102       ; TODO do i need decimal adjust here?
                103       mov     %0,     a
                104       pop     ACC
                105   endmac
0041            106   
0041            107   ; -------------------------;
0041            108   ; Decrement Macro                   ;
0041            109   ; -------------------------;
                110   decrement_BCD mac
                111       push    ACC
                112       push    AR0
                113       ; get second param - how many to subtract
                114       mov     a,      %1
                115       dec     a
                116       mov     R0,     a
                117       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
                118       subb    a,      R0
                119       mov     R0,     a   ; computed compliment, store in R0
                120       mov     a,      %0
                121       add	    a,      R0
                122       ; decimal adjust here?
                123       mov     %0,     a
                124       pop     AR0
                125       pop     ACC
                126   endmac
0041            127   
0041            128   ; -------------------------;
0041            129   ; Print Time Macro                  ;
0041            130   ; -------------------------;
                131   LCD_printTime mac
                132       push    ACC
                133       push    AR2
                134       push    AR3
                135   
                136   	mov 	a, %0
                137       mov 	b, #60
                138       div		ab				; minutes are in a, seconds are in b
                139   
                140   	mov		R2, b
                141   
                142       mov 	b, #10
                143       div		ab				; result is in a, remainder is in b
                144       LCD_cursor(2, 6)
                145       add		a, #0x30
                146       mov		R3, a
                147       LCD_printChar(R3)
                148   
                149       LCD_cursor(2, 7)
                150       mov		a, b
                151       add		a, #0x30
                152       mov		b, a
                153       LCD_printChar(b)
                154   
                155       mov		b, #10
                156       mov		a, R2
                157       div		ab
                158       LCD_cursor(2, 9)
                159       add		a, #0x30
                160       mov		R3, a
                161       LCD_printChar(R3)
                162   
                163       LCD_cursor(2, 10)
                164       mov		a, b
                165       add		a, #0x30
                166       mov		b, a
                167       LCD_printChar(b)
                168   
                169       pop     AR2
                170       pop     AR3
                171       ; pop     B
                172       pop     ACC
                173   endmac
0041            174   
0041            175   ; -------------------------;
0041            176   ; Print Temp Macro                  ;
0041            177   ; -------------------------;
                178   LCD_printTemp mac
                179       push    ACC
                180       push    AR1
                181   
                182   	mov 	a, %0
                183       mov 	b, #100
                184       div		ab				; result is in a, remainder is in b
                185       LCD_cursor(2, 7)
                186       add		a, #0x30
                187       mov		R1, a
                188       LCD_printChar(R1)
                189       mov		a, b
                190       mov		b, #10
                191       div		ab
                192       add		a, #0x30
                193       mov		R1, a
                194       LCD_cursor(2, 8)
                195       LCD_printChar(R1)
                196       LCD_cursor(2, 9)
                197       mov		a, b
                198       add		a, #0x30
                199       mov		b, a
                200       LCD_printChar(b)
                201   
                202       push    AR1
                203       push    ACC
                204   endmac
                 -1   $include(LCD_4bit.inc)
0041              1   cseg
0041              2   
0041              3   ; When using a 22.1184MHz crystal in fast mode
0041              4   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
0041              5   
0041              6   ;---------------------------------;
0041              7   ; Wait 40 microseconds            ;
0041              8   ;---------------------------------;
0041              9   sleep40us:
0041 C000        10            push AR0
0043 78B1        11            mov R0, #177
0045             12   L0:
0045 00          13            nop
0046 00          14            nop
0047 D8FC        15            djnz R0, L0 ; 1+1+3 cycles->5*45.21123ns*177=40us
0049 D000        16            pop AR0
004B 22          17       ret
004C             18   
004C             19   ;===WAIT []ms===
004C             20   ; sleep mac
004C             21   ;        push AR2
004C             22   ;        mov R2, %0
004C             23   ;        lcall ?sleep
004C             24   ;        pop AR2
004C             25   ; endmac
004C             26   ; ?sleep:
004C             27   ;        push AR0
004C             28   ;        push AR1
004C             29   ; L3: mov R1, #45
004C             30   ; L2: mov R0, #166
004C             31   ; L1: djnz R0, L1 ; 3 cycles->3*45.21123ns*166=22.51519us
004C             32   ;     djnz R1, L2 ; 22.51519us*45=1.013ms
004C             33   ;     djnz R2, L3 ; number of millisecons to wait passed in R2
004C             34   ;     pop AR1
004C             35   ;     pop AR0
004C             36   ;     ret
004C             37   
004C             38   ;---------------------------------;
004C             39   ; Toggles the 'E' pin in the LCD  ;
004C             40   ;---------------------------------;
004C             41   LCD_pulse:
004C D294        42            setb LCD_E
004E 120041      43            lcall sleep40us
0051 C294        44            clr LCD_E
0053 22          45       ret
0054             46   
0054             47   ;---------------------------------;
0054             48   ; Writes acc to LCD in 4-bit mode ;
0054             49   ;---------------------------------;
0054             50   LCD_byte:
0054             51            ; Write high 4 bits first
0054 A2E7        52            mov c, ACC.7
0056 92B5        53            mov LCD_D7, c
0058 A2E6        54            mov c, ACC.6
005A 92B4        55            mov LCD_D6, c
005C A2E5        56            mov c, ACC.5
005E 92B3        57            mov LCD_D5, c
0060 A2E4        58            mov c, ACC.4
0062 92B2        59            mov LCD_D4, c
0064 12004C      60       lcall LCD_pulse
0067 120041      61       lcall sleep40us
006A             62            ; Write low 4 bits next
006A A2E3        63            mov c, ACC.3
006C 92B5        64            mov LCD_D7, c
006E A2E2        65            mov c, ACC.2
0070 92B4        66            mov LCD_D6, c
0072 A2E1        67            mov c, ACC.1
0074 92B3        68            mov LCD_D5, c
0076 A2E0        69            mov c, ACC.0
0078 92B2        70            mov LCD_D4, c
007A 12004C      71       lcall LCD_pulse
007D 22          72            ret
007E             73   
007E             74   ;---------------------------------;
007E             75   ; Write data to LCD               ;
007E             76   ;---------------------------------;
                 77   LCD_write mac
                 78   	mov a, %0
                 79   	lcall ?LCD_write
                 80   endmac
007E             81   ?LCD_write:
007E D292        82            setb LCD_RS
0080 020054      83            ljmp LCD_byte
0083             84   
0083             85   ;---------------------------------;
0083             86   ; Write command to LCD            ;
0083             87   ;---------------------------------;
                 88   LCD_cmd mac
                 89   	mov a, %0
                 90   	lcall ?LCD_cmd
                 91   endmac
0083             92   ?LCD_cmd:
0083 C292        93            clr LCD_RS
0085 020054      94            ljmp LCD_byte
0088             95   
0088             96   ;---------------------------------;
0088             97   ; Configure LCD in 4-bit mode     ;
0088             98   ;---------------------------------;
0088             99   LCD_config:
0088 C294       100            clr LCD_E   ; Resting state of LCD's enable pin is zero
008A C293       101            clr LCD_RW  ; We are only writing to the LCD in this program
008C            102            ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
008C 7433       103            mov a, #0x33
008E 120083     103            lcall ?LCD_cmd
0091 7433       104            mov a, #0x33
0093 120083     104            lcall ?LCD_cmd
0096 7432       105            mov a, #0x32
0098 120083     105            lcall ?LCD_cmd ; change to 4-bit mode
009B            106            ; Configure the LCD
009B 7428       107            mov a, #0x28
009D 120083     107            lcall ?LCD_cmd
00A0 740C       108            mov a, #0x0c
00A2 120083     108            lcall ?LCD_cmd
00A5 7401       109            mov a, #0x01
00A7 120083     109            lcall ?LCD_cmd ;  Clear screen command (takes some time)
00AA            110   
00AA            111       ;Wait for the clear screen command to finish.
00AA C002       112            push   AR2
00AC 7A02       112            mov    R2,     #2
00AE 12002E     112            lcall  ?sleep
00B1 D002       112            pop    AR2
00B3 22         113       ret
00B4            114   
00B4            115   ;---------------------------------;
00B4            116   ; Send a constant string to LCD   ;
00B4            117   ;---------------------------------;
                118   LCD_print mac
                119   	push   dph
                120   	push   dpl
                121   	push   acc
                122   	mov    dptr, %0
                123   	lcall  ?LCD_print
                124   	pop    acc
                125   	pop    dpl
                126   	pop    dph
                127   endmac
00B4            128   ?LCD_print:
00B4 E4         129       clr     a
00B5 93         130       movc    a,  @a+dptr
00B6 6006       131       jz      ?LCD_print_return
00B8 12007E     132       lcall   ?LCD_write
00BB A3         133       inc     dptr
00BC 80F6       134       sjmp    ?LCD_print
00BE            135   ?LCD_print_return:
00BE 22         136       ret
00BF            137   
00BF            138   ;---------------------------------;
00BF            139   ; Set LCD cursor at row, column   ;
00BF            140   ;---------------------------------;
                141   LCD_cursor mac
                142   	push   acc
                143   	mov    a,  #%1
                144   	dec    a
                145   	lcall  ?LCD_cursor_%0 ; Select column and row
                146   	pop    acc
                147   endmac
00BF            148   ?LCD_cursor_2:
00BF 4440       149            orl    a,  #01000000B
00C1            150   ?LCD_cursor_1:
00C1 4480       151            orl    a,  #10000000B
00C3 020083     152            ljmp   ?LCD_cmd ; Select column and row
00C6            153   
00C6            154   ;---------------------------------;
00C6            155   ; Display a BCD number in the LCD ;
00C6            156   ;---------------------------------;
                157   LCD_printBCD mac
                158   	push ar0
                159   	mov r0, %0
                160   	lcall ?LCD_printBCD
                161   	pop ar0
                162   endmac
00C6            163   ?LCD_printBCD:
00C6 C0E0       164            push acc
00C8            165            ; Write most significant digit
00C8 E8         166            mov a, r0
00C9 C4         167            swap a
00CA 540F       168            anl a, #0fh
00CC 4430       169            orl a, #30h
00CE 12007E     170            lcall ?LCD_write
00D1            171            ; write least significant digit
00D1 E8         172            mov a, r0
00D2 540F       173            anl a, #0fh
00D4 4430       174            orl a, #30h
00D6 12007E     175            lcall ?LCD_write
00D9 D0E0       176            pop acc
00DB 22         177            ret
00DC            178   
00DC            179   ;------------------------------------;
00DC            180   ; Display a char in the LCD          ;
00DC            181   ;------------------------------------;
                182   LCD_printChar mac
                183   	push acc
                184   	mov a, %0
                185   	lcall ?LCD_write
                186   	pop acc
                187   endmac
                 -1   $include(math32.inc)
                541   $LIST
034C             27   
034C             28   ; Preprocessor constants
034C             29   CLK             equ     22118400
034C             30   BAUD            equ     115200
034C             31   ; T0_RATE         equ     4096
034C             32   ; T0_RELOAD       equ     ((65536-(CLK/4096)))
034C             33   T1_RELOAD       equ     (0x100-CLK/(16*BAUD))
034C             34   T2_RATE         equ     1000
034C             35   T2_RELOAD       equ     (65536-(CLK/T2_RATE))
034C             36   DEBOUNCE        equ     50
034C             37   TIME_RATE       equ     1000
034C             38   
034C             39   ; LCD PINS
034C             40   LCD_RS          equ     P1.2
034C             41   LCD_RW          equ     P1.3
034C             42   LCD_E           equ     P1.4
034C             43   LCD_D4          equ     P3.2
034C             44   LCD_D5          equ     P3.3
034C             45   LCD_D6          equ     P3.4
034C             46   LCD_D7          equ     P3.5
034C             47   
034C             48   ; BUTTONS PINs
034C             49   BTN_START        equ     P2.4
034C             50   BTN_STATE            equ         P2.5
034C             51   BTN_UP           equ     P2.6
034C             52   BTN_DOWN                 equ     P2.7
034C             53   
034C             54   ; ADC SPI PINS
034C             55   ADC_CE      equ     P2.0
034C             56   ADC_MOSI    equ     P2.1
034C             57   ADC_MISO    equ     P2.2
034C             58   ADC_SCLK    equ     P2.3
034C             59   
034C             60   ; SSR / oven control pin
034C             61   SSR         equ     P3.7
034C             62   
034C             63   ; States
034C             64   RAMP2SOAK                equ     1
034C             65   PREHEAT_SOAK     equ     2
034C             66   RAMP2PEAK                equ     3
034C             67   REFLOW                   equ     4
034C             68   COOLING                  equ     5
034C             69   
034C             70   
034C             71   ; Parameters
0030             72   dseg at 0x30
0030             73       soakTemp:       ds  1
0031             74       soakTime:       ds  1
0032             75       reflowTemp:     ds  1
0033             76       reflowTime:     ds  1
0034             77       seconds:        ds  1
0035             78       minutes:        ds  1
0036             79       countms:        ds  2
0038             80       state:          ds  1 ; current state of the controller
0039             81       crtTemp:         ds  1 ; temperature of oven
003A             82            perCntr:                ds  1 ; counter to count period in PWM
003B             83            ovenPower:          ds  1 ; currnet power of the oven, number between 0 and 10
003C             84   
003C             85       ; for math32
003C             86       result:         ds  2
003E             87       bcd:            ds  5
0043             88       x:              ds  4
0047             89       y:              ds  4
004B             90   
0000             91   bseg
0000             92       seconds_flag:        dbit 1
0001             93       ongoing_flag:        dbit 1                  ;only check for buttons when the process has not started (JK just realized we might not need this..)
0002             94            oven_enabled:   dbit 1
0003             95   
0003             96       ; for math32
0003             97       mf:             dbit 1
0004             98   
034C             99   cseg
034C            100   ; LCD SCREEN
034C            101   ;                        1234567890123456
034C 53544154   102   msg_main_top:            db 'STATE:-  T=--- C', 0  ; State: 1-5
     453A2D20
     20543D2D
     2D2D2043
     00
035D 20202054   103   msg_main_btm:            db '   TIME --:--   ', 0  ; elapsed time
     494D4520
     2D2D3A2D
     2D202020
     00
036E 534F414B   104   msg_soakTemp:       db 'SOAK TEMP:     <', 0
     2054454D
     503A2020
     2020203C
     00
037F 534F414B   105   msg_soakTime:       db 'SOAK TIME:     <', 0
     2054494D
     453A2020
     2020203C
     00
0390 5245464C   106   msg_reflowTemp:      db 'REFLOW TEMP:   <', 0
     4F572054
     454D503A
     2020203C
     00
03A1 5245464C   107   msg_reflowTime:      db 'REFLOW TIME:   <', 0
     4F572054
     494D453A
     2020203C
     00
03B2 20202020   108   msg_temp:                db '      --- C    >', 0
     20202D2D
     2D204320
     2020203E
     00
03C3 20202020   109   msg_time:                db '     --:--     >', 0
     202D2D3A
     2D2D2020
     2020203E
     00
03D4 20202052   110   msg_state1:         db '   RampToSoak   ', 0
     616D7054
     6F536F61
     6B202020
     00
03E5 20202D2D   111   msg_fsm:            db '  --- C  --:--  ', 0
     2D204320
     202D2D3A
     2D2D2020
     00
03F6            112   
03F6            113   ; -------------------------;
03F6            114   ; Initialize Timer 2        ;
03F6            115   ; -------------------------;
03F6            116   T2_init:
03F6 75C800     117       mov          T2CON,          #0
03F9 75CBA9     118       mov          RCAP2H, #high(T2_RELOAD)
03FC 75CA9A     119       mov          RCAP2L, #low(T2_RELOAD)
03FF E4         120       clr          a
0400 F536       121       mov          countms+0, a
0402 F537       122       mov          countms+1, a
0404 D2AD       123       setb         ET2  ; Enable timer 2 interrupt
0406 D2CA       124       setb         TR2  ; Enable timer 2
0408 22         125       ret
0409            126   
0409            127   ;---------------------------------;
0409            128   ; ISR for timer 2                 ;
0409            129   ;---------------------------------;
0409            130   T2_ISR:
0409 C2CF       131       clr          TF2
040B C0E0       132       push         acc
040D C0D0       133       push         psw
040F C001       134       push         AR1
0411 0536       135       inc          countms+0
0413 E536       136       mov          a,     countms+0
0415 7005       137       jnz          T2_ISR_incDone
0417 0537       138       inc          countms+1
0419            139   
0419            140       ; PWM
0419 120454     141       lcall   PWM_oven
041C            142   
041C            143   T2_ISR_incDone:
041C            144            ; Check if half second has passed
041C E536       145       mov     a,  countms+0
041E B4E82C     146       cjne    a,  #low(TIME_RATE),    T2_ISR_return
0421 E537       147       mov     a,  countms+1
0423 B40327     148       cjne    a,  #high(TIME_RATE),   T2_ISR_return
0426 D200       149       setb         seconds_flag
0428            150       ; reset 16 bit ms counter
0428 E4         151       clr          a
0429 F536       152       mov          countms+0,     a
042B F537       153       mov          countms+1,     a
042D            154       ; Increment seconds
042D E534       155       mov     a,   seconds
042F 2401       156       add     a,   #0x01
0431            157       ; BCD Conversion and writeback
0431 D4         158       da       a
0432 F534       159       mov     seconds,    a
0434            160       ; increment minutes when seconds -> 60
0434 C3         161       clr     c
0435 9460       162       subb    a,          #0x60
0437 6002       163       jz       T2_ISR_minutes
0439 8012       164       sjmp         T2_ISR_return
043B            165   T2_ISR_minutes:
043B E535       166       mov     a,          minutes
043D 2401       167       add     a,          #0x01
043F D4         168       da       a
0440 F535       169       mov     minutes,    a
0442 753400     170       mov     seconds,    #0x00
0445            171       ; reset minute to 0 when minutes -> 60
0445 C3         172       clr     c
0446 9460       173       subb    a,          #0x60
0448 7003       174       jnz     T2_ISR_return
044A 753500     175       mov     minutes,    #0x00
044D            176   T2_ISR_return:
044D D001       177       pop          AR1
044F D0D0       178       pop          psw
0451 D0E0       179       pop          acc
0453 32         180       reti
0454            181   
0454            182   ;---------------------------------;
0454            183   ; Pulse Width Modulation                   ;
0454            184   ; Power: [#0-#10]                                  ;
0454            185   ; Period: #10                                      ;
0454            186   ; Occurs roughly every half sec.  ;
0454            187   ;---------------------------------;
0454            188   PWM_oven:
0454 C0E0       189       push    ACC
0456 E53A       190       mov     a,              perCntr
0458 300212     191       jnb     oven_enabled,   PWM_oven_on
045B            192       ; toaster is now off, check to see if toaster should be turned on
045B B53B23     193       cjne    a,  ovenPower,  PWM_cont
045E            194       ; if power 10, then never turn off (corner case)
045E E53B       195       mov     a,  ovenPower
0460 B40A03     196       cjne    a,  #10,    PWM_corner1false
0463 020468     197       ljmp    PWM_corner1true
0466            198   PWM_corner1false:
0466 D2B7       199       setb    SSR
0468            200   PWM_corner1true:
0468 D202       201       setb    oven_enabled
046A 020481     202       ljmp    PWM_cont
046D            203   PWM_oven_on:
046D            204       ; toaster is now on, check to see if toaster should be turned off
046D B40A11     205       cjne    a,  #10,    PWM_cont
0470            206       ; if power 0, then never turn on (corner case)
0470 E53B       207       mov     a,  ovenPower
0472 B40003     208       cjne    a,  #0,     PWM_corner2false
0475 02047A     209       ljmp    PWM_corner2true
0478            210   PWM_corner2false:
0478 C2B7       211       clr     SSR
047A            212   PWM_corner2true:
047A C202       213       clr     oven_enabled
047C E4         214       clr     a
047D F53A       215       mov     perCntr,    a
047F 8004       216       sjmp    PWM_return
0481            217   PWM_cont:
0481 053A       218       inc     perCntr
0483 8000       219       sjmp    PWM_return
0485            220   PWM_return:
0485 D0E0       221       pop     ACC
0487 22         222       ret
0488            223   
0488            224   ;-----------------------------;
0488            225   ; Initialize SPI                       ;
0488            226   ;-----------------------------;
0488            227   SPI_init:
0488            228       ; debounce reset button
0488 79DE       229       mov     R1,     #222
048A 78A6       230       mov     R0,     #166
048C D8FE       231       djnz    R0,     $
048E D9FA       232       djnz    R1,     $-4
0490            233       ; set timer
0490 C28E       234       clr     TR1
0492 53890F     235       anl     TMOD,   #0x0f
0495 438920     236       orl      TMOD,   #0x20
0498 438780     237       orl      PCON,   #0x80
049B 758DF4     238       mov      TH1,    #T1_RELOAD
049E 758BF4     239       mov      TL1,    #T1_RELOAD
04A1 D28E       240       setb    TR1
04A3 759852     241       mov      SCON,   #0x52
04A6 22         242       ret
04A7            243   ;-----------------------------;
04A7            244   ; Initialize comm to ADC      ;
04A7            245   ;-----------------------------;
04A7            246   ADC_init:
04A7 D2A2       247       setb    ADC_MISO
04A9 C2A3       248       clr     ADC_SCLK
04AB 22         249       ret
04AC            250   ;-----------------------------;
04AC            251   ; Communicate with ADC        ;
04AC            252   ;-----------------------------;
04AC            253   ; send byte in R0, receive byte in R1
04AC            254   ADC_comm:
04AC C0E0       255       push    ACC
04AE 7900       256       mov     R1,     #0
04B0 7A08       257       mov     R2,     #8
04B2            258   ADC_comm_loop:
04B2 E8         259       mov     a,      R0
04B3 33         260       rlc     a
04B4 F8         261       mov     R0,     a
04B5 92A1       262       mov     ADC_MOSI,   c
04B7 D2A3       263       setb    ADC_SCLK
04B9 A2A2       264       mov     c,      ADC_MISO
04BB E9         265       mov     a,      R1
04BC 33         266       rlc     a
04BD F9         267       mov     R1,     a
04BE C2A3       268       clr     ADC_SCLK
04C0 DAF0       269       djnz    R2,     ADC_comm_loop
04C2 D0E0       270       pop     ACC
04C4 22         271       ret
04C5            272   
04C5            273   ;-----------------------------;
04C5            274   ; Get number from ADC         ;
04C5            275   ;-----------------------------;
04C5            276   ADC_get:
04C5 C0E0       277       push    ACC
04C7 C000       278       push    AR0
04C9 C001       279       push    AR1
04CB C2A0       280       clr     ADC_CE
04CD            281   
04CD            282       ; starting bit is set to 1
04CD 7801       283       mov     R0,     #0x01
04CF 1204AC     284       lcall   ADC_comm
04D2            285   
04D2            286       ; read channel 0 and save to result
04D2            287       ; read lower 2 bits of upper byte: ------XX --------
04D2 7880       288       mov     R0,         #0x80
04D4 1204AC     289       lcall   ADC_comm
04D7 E9         290       mov     a,          R1
04D8 5403       291       anl     a,          #0x03
04DA F53D       292       mov     result+1,   a
04DC            293   
04DC            294       ; read lower byte: -------- XXXXXXXX
04DC 7855       295       mov     R0,         #0x55   ; random command
04DE 1204AC     296       lcall   ADC_comm
04E1 893C       297       mov     result,     R1
04E3 D2A0       298       setb    ADC_CE
04E5            299   
04E5            300       ; delay
04E5            301       ; sleep(#50)
04E5            302   
04E5            303       ; convert result into BCD using math32
04E5 853C43     304       mov     x,      result
04E8 853D44     305       mov     x+1,    result+1
04EB 754500     306       mov     x+2,    #0x00
04EE 754600     307       mov     x+3,    #0x00
04F1 1200DC     308       lcall   hex2bcd
04F4 853E3C     309       mov     result,     bcd
04F7 853F3D     310       mov     result+1,   bcd+1
04FA            311   
04FA            312       ; restore registers
04FA D001       313       pop     AR1
04FC D000       314       pop     AR0
04FE D0E0       315       pop     ACC
0500 22         316       ret
0501            317   
0501            318   ;-----------------------------;
0501            319   ;        MAIN PROGRAM                  ;
0501            320   ;-----------------------------;
0501            321   setup:
0501 75817F     322       mov     SP,     #0x7F
0504 75C100     323       mov     PMOD,   #0
0507            324   
0507            325       ; Timer setup
0507 1203F6     326       lcall   T2_init
050A D2AF       327       setb    EA
050C            328   
050C            329       ; LCD setup
050C 120088     330       lcall   LCD_config
050F            331   
050F            332            ; PWM setup
050F 753B00     333       mov     ovenPower,      #0 ;choose initial power here (0-10)
0512 D202       334       setb    oven_enabled
0514 753A0A     335       mov     perCntr,        #10
0517            336   
0517            337       ; Initialize MCP3008 ADC
0517 D2A0       338       setb    ADC_CE
0519 1204A7     339       lcall   ADC_init
051C 120488     340       lcall   SPI_init
051F            341   
051F            342       ; Variables declaration
051F C201       343       clr      ongoing_flag
0521 D200       344       setb    seconds_flag                                         ; may not need this..
0523 753400     345       mov     seconds,        #0x00                        ; initialize variables
0526 753500     346       mov     minutes,        #0x00
0529 753000     347       mov      soakTemp,       #0x00
052C 753100     348       mov      soakTime,       #0x00
052F 753200     349       mov     reflowTemp,     #0x00
0532 753300     350       mov     reflowTime,     #0x00
0535 753900     351            mov     crtTemp,        #0x00               ; temporary for testing purposes
0538            352   main:
0538            353       ; MAIN MENU LOOP
0538            354       ; CHECK: [START], [STATE]
0538 C0E0       355            push   acc
053A 7401       355            mov    a,  #1
053C 14         355            dec    a
053D 1200C1     355            lcall  ?LCD_cursor_1 ; Select column and row
0540 D0E0       355            pop    acc
0542 C083       356            push   dph
0544 C082       356            push   dpl
0546 C0E0       356            push   acc
0548 90034C     356            mov    dptr, #msg_main_top
054B 1200B4     356            lcall  ?LCD_print
054E D0E0       356            pop    acc
0550 D082       356            pop    dpl
0552 D083       356            pop    dph
0554 C0E0       357            push   acc
0556 7401       357            mov    a,  #1
0558 14         357            dec    a
0559 1200BF     357            lcall  ?LCD_cursor_2 ; Select column and row
055C D0E0       357            pop    acc
055E            357   
055E C083       358            push   dph
0560 C082       358            push   dpl
0562 C0E0       358            push   acc
0564 90035D     358            mov    dptr, #msg_main_btm
0567 1200B4     358            lcall  ?LCD_print
056A D0E0       358            pop    acc
056C D082       358            pop    dpl
056E D083       358            pop    dph
0570 C0E0       359            push   acc
0572 740F       359            mov    a,  #15
0574 14         359            dec    a
0575 1200C1     359            lcall  ?LCD_cursor_1 ; Select column and row
0578 D0E0       359            pop    acc
057A C0E0       360            push acc
057C 74DF       360            mov a, #0xDF
057E 12007E     360            lcall ?LCD_write
0581 D0E0       360            pop acc    ; deg symbol
0583            361   main_button_start:
0583            362       ; [START] - start the reflow program
0583 20A411     363       jb           BTN_START, main_button_state
0586 C002       364            push   AR2
0588 7A32       364            mov    R2,     #DEBOUNCE
058A 12002E     364            lcall  ?sleep
058D D002       364            pop    AR2
058F 20A405     365       jb           BTN_START, main_button_state
0592 30A4FD     366       jnb          BTN_START, $
0595 D201       367       setb         ongoing_flag
0597            368   
0597            369       ; **PUT WHAT HAPPENS IF YOU PRESS START HERE LMAO HELP ME LORD (whatever goes here has to connect to main_update and check for stop button)
0597            370   
0597            371   main_button_state:
0597            372       ; [STATE] - configure reflow program
0597 200115     373            jb              ongoing_flag, main_update       ; skip checking for state if process has started
059A 20A512     374       jb           BTN_STATE, main_update
059D C002       375            push   AR2
059F 7A32       375            mov    R2,     #DEBOUNCE
05A1 12002E     375            lcall  ?sleep
05A4 D002       375            pop    AR2
05A6 20A506     376       jb           BTN_STATE, main_update
05A9 30A5FD     377       jnb          BTN_STATE, $
05AC 0205EE     378       ljmp    conf_soakTemp
05AF            379   main_update:
05AF            380       ; read ADC via SPI -> result
05AF 1204C5     381       lcall   ADC_get
05B2            382   
05B2            383       ; *** CONTINUE HERE
05B2            384   
05B2            385            ; update time and ** temperature display here
05B2 C0E0       386            push   acc
05B4 7409       386            mov    a,  #9
05B6 14         386            dec    a
05B7 1200BF     386            lcall  ?LCD_cursor_2 ; Select column and row
05BA D0E0       386            pop    acc
05BC C000       387            push ar0
05BE A835       387            mov r0, minutes
05C0 1200C6     387            lcall ?LCD_printBCD
05C3 D000       387            pop ar0
05C5 C0E0       388            push   acc
05C7 740C       388            mov    a,  #12
05C9 14         388            dec    a
05CA 1200BF     388            lcall  ?LCD_cursor_2 ; Select column and row
05CD D0E0       388            pop    acc
05CF C000       389            push ar0
05D1 A834       389            mov r0, seconds
05D3 1200C6     389            lcall ?LCD_printBCD
05D6 D000       389            pop ar0
05D8 C0E0       390            push   acc
05DA 740C       390            mov    a,  #12
05DC 14         390            dec    a
05DD 1200C1     390            lcall  ?LCD_cursor_1 ; Select column and row
05E0 D0E0       390            pop    acc
05E2 C000       391            push ar0
05E4 A839       391            mov r0, crtTemp
05E6 1200C6     391            lcall ?LCD_printBCD
05E9 D000       391            pop ar0 ; TODO FIXME
05EB 020583     392       ljmp         main_button_start
05EE            393   
05EE            394   ;-------------------------------------;
05EE            395   ; CONFIGURE: Soak Temperature              ;
05EE            396   ;-------------------------------------;
05EE            397   conf_soakTemp:
05EE            398       ; CHECK: [STATE], [UP], [DOWN]
05EE            399       ; soak temperature interface
05EE C0E0       400            push   acc
05F0 7401       400            mov    a,  #1
05F2 14         400            dec    a
05F3 1200C1     400            lcall  ?LCD_cursor_1 ; Select column and row
05F6 D0E0       400            pop    acc
05F8 C083       401            push   dph
05FA C082       401            push   dpl
05FC C0E0       401            push   acc
05FE 90036E     401            mov    dptr, #msg_soakTemp
0601 1200B4     401            lcall  ?LCD_print
0604 D0E0       401            pop    acc
0606 D082       401            pop    dpl
0608 D083       401            pop    dph
060A C0E0       402            push   acc
060C 7401       402            mov    a,  #1
060E 14         402            dec    a
060F 1200BF     402            lcall  ?LCD_cursor_2 ; Select column and row
0612 D0E0       402            pop    acc
0614            402   
0614 C083       403            push   dph
0616 C082       403            push   dpl
0618 C0E0       403            push   acc
061A 9003B2     403            mov    dptr, #msg_temp
061D 1200B4     403            lcall  ?LCD_print
0620 D0E0       403            pop    acc
0622 D082       403            pop    dpl
0624 D083       403            pop    dph
0626            404   conf_soakTemp_update:
0626 C0E0       405            push   acc
0628 7407       405            mov    a,  #7
062A 14         405            dec    a
062B 1200BF     405            lcall  ?LCD_cursor_2 ; Select column and row
062E D0E0       405            pop    acc
0630 C0E0       406       push    ACC
0632 C001       406       push    AR1
0634            406   
0634 E530       406            mov     a, soakTemp
0636 75F064     406       mov          b, #100
0639 84         406       div          ab                              ; result is in a, remainder is in b
063A C0E0       406            push   acc
063C 7407       406            mov    a,  #7
063E 14         406            dec    a
063F 1200BF     406            lcall  ?LCD_cursor_2 ; Select column and row
0642 D0E0       406            pop    acc
0644 2430       406       add          a, #0x30
0646 F9         406       mov          R1, a
0647 C0E0       406            push acc
0649 E9         406            mov a, R1
064A 12007E     406            lcall ?LCD_write
064D D0E0       406            pop acc
064F E5F0       406       mov          a, b
0651 75F00A     406       mov          b, #10
0654 84         406       div          ab
0655 2430       406       add          a, #0x30
0657 F9         406       mov          R1, a
0658 C0E0       406            push   acc
065A 7408       406            mov    a,  #8
065C 14         406            dec    a
065D 1200BF     406            lcall  ?LCD_cursor_2 ; Select column and row
0660 D0E0       406            pop    acc
0662 C0E0       406            push acc
0664 E9         406            mov a, R1
0665 12007E     406            lcall ?LCD_write
0668 D0E0       406            pop acc
066A C0E0       406            push   acc
066C 7409       406            mov    a,  #9
066E 14         406            dec    a
066F 1200BF     406            lcall  ?LCD_cursor_2 ; Select column and row
0672 D0E0       406            pop    acc
0674 E5F0       406       mov          a, b
0676 2430       406       add          a, #0x30
0678 F5F0       406       mov          b, a
067A C0E0       406            push acc
067C E5F0       406            mov a, b
067E 12007E     406            lcall ?LCD_write
0681 D0E0       406            pop acc
0683            406   
0683 C001       406       push    AR1
0685 C0E0       406       push    ACC  ; display soak temperature on LCD
0687            407   
0687            408   conf_soakTemp_button_up:
0687            409       ; [UP] increment soak temperature by 1
0687 20A619     410       jb           BTN_UP, conf_soakTemp_button_down
068A C002       411            push   AR2
068C 7A32       411            mov    R2,     #DEBOUNCE
068E 12002E     411            lcall  ?sleep
0691 D002       411            pop    AR2
0693 20A60D     412       jb           BTN_UP, conf_soakTemp_button_down
0696 30A6FD     413       jnb          BTN_UP, $
0699 C0E0       414       push    ACC
069B E530       414       mov     a,      soakTemp
069D 2401       414       add     a,      #1
069F            414       ; TODO do i need decimal adjust here?
069F F530       414       mov     soakTemp,     a
06A1 D0E0       414       pop     ACC
06A3            415   
06A3            416   conf_soakTemp_button_down:
06A3            417       ; [DOWN] decrement soak temperature by 1
06A3 20A724     418       jb           BTN_DOWN, conf_soakTemp_button_state
06A6 C002       419            push   AR2
06A8 7A32       419            mov    R2,     #DEBOUNCE
06AA 12002E     419            lcall  ?sleep
06AD D002       419            pop    AR2
06AF 20A718     420       jb           BTN_DOWN, conf_soakTemp_button_state
06B2 30A7FD     421       jnb          BTN_DOWN, $
06B5 C0E0       422       push    ACC
06B7 C000       422       push    AR0
06B9            422       ; get second param - how many to subtract
06B9 7401       422       mov     a,      #1
06BB 14         422       dec     a
06BC F8         422       mov     R0,     a
06BD 74FF       422       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
06BF 98         422       subb    a,      R0
06C0 F8         422       mov     R0,     a   ; computed compliment, store in R0
06C1 E530       422       mov     a,      soakTemp
06C3 28         422       add      a,      R0
06C4            422       ; decimal adjust here?
06C4 F530       422       mov     soakTemp,     a
06C6 D000       422       pop     AR0
06C8 D0E0       422       pop     ACC
06CA            422   
06CA            423   
06CA            424   conf_soakTemp_button_state:
06CA            425       ; [STATE] save this setting and move on
06CA 20A512     426       jb           BTN_STATE, conf_soakTemp_j
06CD C002       427            push   AR2
06CF 7A32       427            mov    R2,     #DEBOUNCE
06D1 12002E     427            lcall  ?sleep
06D4 D002       427            pop    AR2
06D6 20A506     428       jb           BTN_STATE, conf_soakTemp_j
06D9 30A5FD     429       jnb          BTN_STATE, $
06DC 0206E2     430       ljmp         conf_soakTime
06DF            431   conf_soakTemp_j:
06DF 020626     432            ljmp    conf_soakTemp_update
06E2            433   
06E2            434   ;-------------------------------------;
06E2            435   ; CONFIGURE: Soak Time                     ;
06E2            436   ;-------------------------------------;
06E2            437   conf_soakTime:
06E2            438       ; CHECK: [STATE], [UP], [DOWN]
06E2            439       ; soak time interface
06E2 C0E0       440            push   acc
06E4 7401       440            mov    a,  #1
06E6 14         440            dec    a
06E7 1200C1     440            lcall  ?LCD_cursor_1 ; Select column and row
06EA D0E0       440            pop    acc
06EC C083       441            push   dph
06EE C082       441            push   dpl
06F0 C0E0       441            push   acc
06F2 90037F     441            mov    dptr, #msg_soakTime
06F5 1200B4     441            lcall  ?LCD_print
06F8 D0E0       441            pop    acc
06FA D082       441            pop    dpl
06FC D083       441            pop    dph
06FE C0E0       442            push   acc
0700 7401       442            mov    a,  #1
0702 14         442            dec    a
0703 1200BF     442            lcall  ?LCD_cursor_2 ; Select column and row
0706 D0E0       442            pop    acc
0708            442   
0708 C083       443            push   dph
070A C082       443            push   dpl
070C C0E0       443            push   acc
070E 9003C3     443            mov    dptr, #msg_time
0711 1200B4     443            lcall  ?LCD_print
0714 D0E0       443            pop    acc
0716 D082       443            pop    dpl
0718 D083       443            pop    dph
071A            444   conf_soakTime_update:
071A            445       ; seconds is converted to minutes and seconds BCD
071A C0E0       446       push    ACC
071C C002       446       push    AR2
071E C003       446       push    AR3
0720            446   
0720 E531       446            mov     a, soakTime
0722 75F03C     446       mov          b, #60
0725 84         446       div          ab                              ; minutes are in a, seconds are in b
0726            446   
0726 AAF0       446            mov             R2, b
0728            446   
0728 75F00A     446       mov          b, #10
072B 84         446       div          ab                              ; result is in a, remainder is in b
072C C0E0       446            push   acc
072E 7406       446            mov    a,  #6
0730 14         446            dec    a
0731 1200BF     446            lcall  ?LCD_cursor_2 ; Select column and row
0734 D0E0       446            pop    acc
0736 2430       446       add          a, #0x30
0738 FB         446       mov          R3, a
0739 C0E0       446            push acc
073B EB         446            mov a, R3
073C 12007E     446            lcall ?LCD_write
073F D0E0       446            pop acc
0741            446   
0741 C0E0       446            push   acc
0743 7407       446            mov    a,  #7
0745 14         446            dec    a
0746 1200BF     446            lcall  ?LCD_cursor_2 ; Select column and row
0749 D0E0       446            pop    acc
074B E5F0       446       mov          a, b
074D 2430       446       add          a, #0x30
074F F5F0       446       mov          b, a
0751 C0E0       446            push acc
0753 E5F0       446            mov a, b
0755 12007E     446            lcall ?LCD_write
0758 D0E0       446            pop acc
075A            446   
075A 75F00A     446       mov          b, #10
075D EA         446       mov          a, R2
075E 84         446       div          ab
075F C0E0       446            push   acc
0761 7409       446            mov    a,  #9
0763 14         446            dec    a
0764 1200BF     446            lcall  ?LCD_cursor_2 ; Select column and row
0767 D0E0       446            pop    acc
0769 2430       446       add          a, #0x30
076B FB         446       mov          R3, a
076C C0E0       446            push acc
076E EB         446            mov a, R3
076F 12007E     446            lcall ?LCD_write
0772 D0E0       446            pop acc
0774            446   
0774 C0E0       446            push   acc
0776 740A       446            mov    a,  #10
0778 14         446            dec    a
0779 1200BF     446            lcall  ?LCD_cursor_2 ; Select column and row
077C D0E0       446            pop    acc
077E E5F0       446       mov          a, b
0780 2430       446       add          a, #0x30
0782 F5F0       446       mov          b, a
0784 C0E0       446            push acc
0786 E5F0       446            mov a, b
0788 12007E     446            lcall ?LCD_write
078B D0E0       446            pop acc
078D            446   
078D D002       446       pop     AR2
078F D003       446       pop     AR3
0791            446       ; pop     B
0791 D0E0       446       pop     ACC
0793            447   
0793            448   conf_soakTime_button_up:
0793            449       ; [UP] increment soak time by 5
0793 20A619     450       jb           BTN_UP, conf_soakTime_button_down
0796 C002       451            push   AR2
0798 7A32       451            mov    R2,     #DEBOUNCE
079A 12002E     451            lcall  ?sleep
079D D002       451            pop    AR2
079F 20A60D     452            jb              BTN_UP, conf_soakTime_button_down
07A2 30A6FD     453            jnb     BTN_UP, $
07A5 C0E0       454       push    ACC
07A7 E531       454       mov     a,      soakTime
07A9 2405       454       add     a,      #0x05
07AB            454       ; TODO do i need decimal adjust here?
07AB F531       454       mov     soakTime,     a
07AD D0E0       454       pop     ACC
07AF            455   
07AF            456   conf_soakTime_button_down:
07AF            457       ; [DOWN] decrement soak time by 5
07AF 20A724     458       jb           BTN_DOWN, conf_soakTime_button_state
07B2 C002       459            push   AR2
07B4 7A32       459            mov    R2,     #DEBOUNCE
07B6 12002E     459            lcall  ?sleep
07B9 D002       459            pop    AR2
07BB 20A718     460            jb              BTN_DOWN, conf_soakTime_button_state
07BE 30A7FD     461            jnb     BTN_DOWN, $
07C1 C0E0       462       push    ACC
07C3 C000       462       push    AR0
07C5            462       ; get second param - how many to subtract
07C5 7405       462       mov     a,      #0x05
07C7 14         462       dec     a
07C8 F8         462       mov     R0,     a
07C9 74FF       462       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
07CB 98         462       subb    a,      R0
07CC F8         462       mov     R0,     a   ; computed compliment, store in R0
07CD E531       462       mov     a,      soakTime
07CF 28         462       add      a,      R0
07D0            462       ; decimal adjust here?
07D0 F531       462       mov     soakTime,     a
07D2 D000       462       pop     AR0
07D4 D0E0       462       pop     ACC
07D6            463   
07D6            464   conf_soakTime_button_state:
07D6            465       ; [STATE] save soak time and move on
07D6 20A512     466       jb           BTN_STATE, conf_soakTime_j
07D9 C002       467            push   AR2
07DB 7A32       467            mov    R2,     #DEBOUNCE
07DD 12002E     467            lcall  ?sleep
07E0 D002       467            pop    AR2
07E2 20A506     468            jb              BTN_STATE, conf_soakTime_j
07E5 30A5FD     469            jnb     BTN_STATE, $
07E8 0207EE     470       ljmp         conf_reflowTemp
07EB            471   
07EB            472   conf_soakTime_j:
07EB 02071A     473            ljmp    conf_soakTime_update
07EE            474   
07EE            475   ;-------------------------------------;
07EE            476   ; CONFIGURE: Reflow Temperature            ;
07EE            477   ;-------------------------------------;
07EE            478   conf_reflowTemp:
07EE            479       ; CHECK: [STATE], [UP], [DOWN]
07EE            480       ; reflow temperature setting interface
07EE C0E0       481            push   acc
07F0 7401       481            mov    a,  #1
07F2 14         481            dec    a
07F3 1200C1     481            lcall  ?LCD_cursor_1 ; Select column and row
07F6 D0E0       481            pop    acc
07F8 C083       482            push   dph
07FA C082       482            push   dpl
07FC C0E0       482            push   acc
07FE 900390     482            mov    dptr, #msg_reflowTemp
0801 1200B4     482            lcall  ?LCD_print
0804 D0E0       482            pop    acc
0806 D082       482            pop    dpl
0808 D083       482            pop    dph
080A C0E0       483            push   acc
080C 7401       483            mov    a,  #1
080E 14         483            dec    a
080F 1200BF     483            lcall  ?LCD_cursor_2 ; Select column and row
0812 D0E0       483            pop    acc
0814 C083       484            push   dph
0816 C082       484            push   dpl
0818 C0E0       484            push   acc
081A 9003B2     484            mov    dptr, #msg_temp
081D 1200B4     484            lcall  ?LCD_print
0820 D0E0       484            pop    acc
0822 D082       484            pop    dpl
0824 D083       484            pop    dph
0826            485   conf_reflowTemp_update:
0826 C0E0       486            push   acc
0828 7407       486            mov    a,  #7
082A 14         486            dec    a
082B 1200BF     486            lcall  ?LCD_cursor_2 ; Select column and row
082E D0E0       486            pop    acc
0830 C0E0       487       push    ACC
0832 C001       487       push    AR1
0834            487   
0834 E532       487            mov     a, reflowTemp
0836 75F064     487       mov          b, #100
0839 84         487       div          ab                              ; result is in a, remainder is in b
083A C0E0       487            push   acc
083C 7407       487            mov    a,  #7
083E 14         487            dec    a
083F 1200BF     487            lcall  ?LCD_cursor_2 ; Select column and row
0842 D0E0       487            pop    acc
0844 2430       487       add          a, #0x30
0846 F9         487       mov          R1, a
0847 C0E0       487            push acc
0849 E9         487            mov a, R1
084A 12007E     487            lcall ?LCD_write
084D D0E0       487            pop acc
084F E5F0       487       mov          a, b
0851 75F00A     487       mov          b, #10
0854 84         487       div          ab
0855 2430       487       add          a, #0x30
0857 F9         487       mov          R1, a
0858 C0E0       487            push   acc
085A 7408       487            mov    a,  #8
085C 14         487            dec    a
085D 1200BF     487            lcall  ?LCD_cursor_2 ; Select column and row
0860 D0E0       487            pop    acc
0862 C0E0       487            push acc
0864 E9         487            mov a, R1
0865 12007E     487            lcall ?LCD_write
0868 D0E0       487            pop acc
086A C0E0       487            push   acc
086C 7409       487            mov    a,  #9
086E 14         487            dec    a
086F 1200BF     487            lcall  ?LCD_cursor_2 ; Select column and row
0872 D0E0       487            pop    acc
0874 E5F0       487       mov          a, b
0876 2430       487       add          a, #0x30
0878 F5F0       487       mov          b, a
087A C0E0       487            push acc
087C E5F0       487            mov a, b
087E 12007E     487            lcall ?LCD_write
0881 D0E0       487            pop acc
0883            487   
0883 C001       487       push    AR1
0885 C0E0       487       push    ACC
0887            488   
0887            489   conf_reflowTemp_button_up:
0887            490       ; [UP]  increment reflow tempreature by 1
0887 20A619     491       jb           BTN_UP, conf_reflowTemp_button_down
088A C002       492            push   AR2
088C 7A32       492            mov    R2,     #DEBOUNCE
088E 12002E     492            lcall  ?sleep
0891 D002       492            pop    AR2
0893 20A60D     493            jb              BTN_UP, conf_reflowTemp_button_down
0896 30A6FD     494            jnb     BTN_UP, $
0899 C0E0       495       push    ACC
089B E532       495       mov     a,      reflowTemp
089D 2401       495       add     a,      #1
089F            495       ; TODO do i need decimal adjust here?
089F F532       495       mov     reflowTemp,     a
08A1 D0E0       495       pop     ACC
08A3            496   
08A3            497   conf_reflowTemp_button_down:
08A3            498       ; [DOWN] decrement reflow tempreature by 1
08A3 20A724     499       jb           BTN_DOWN, conf_reflowTemp_button_state
08A6 C002       500            push   AR2
08A8 7A32       500            mov    R2,     #DEBOUNCE
08AA 12002E     500            lcall  ?sleep
08AD D002       500            pop    AR2
08AF 20A718     501            jb              BTN_DOWN, conf_reflowTemp_button_state
08B2 30A7FD     502            jnb     BTN_DOWN, $
08B5 C0E0       503       push    ACC
08B7 C000       503       push    AR0
08B9            503       ; get second param - how many to subtract
08B9 7401       503       mov     a,      #1
08BB 14         503       dec     a
08BC F8         503       mov     R0,     a
08BD 74FF       503       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
08BF 98         503       subb    a,      R0
08C0 F8         503       mov     R0,     a   ; computed compliment, store in R0
08C1 E532       503       mov     a,      reflowTemp
08C3 28         503       add      a,      R0
08C4            503       ; decimal adjust here?
08C4 F532       503       mov     reflowTemp,     a
08C6 D000       503       pop     AR0
08C8 D0E0       503       pop     ACC
08CA            504   
08CA            505   conf_reflowTemp_button_state:
08CA            506       ; [STATE] save reflow temperature and move on
08CA 20A512     507       jb           BTN_STATE, conf_reflowTemp_j
08CD C002       508            push   AR2
08CF 7A32       508            mov    R2,     #DEBOUNCE
08D1 12002E     508            lcall  ?sleep
08D4 D002       508            pop    AR2
08D6 20A506     509            jb              BTN_STATE, conf_reflowTemp_j
08D9 30A5FD     510            jnb     BTN_STATE, $
08DC 0208E2     511       ljmp         conf_reflowTime
08DF            512   
08DF            513   conf_reflowTemp_j:
08DF 020826     514            ljmp    conf_reflowTemp_update
08E2            515   
08E2            516   ;-------------------------------------;
08E2            517   ; CONFIGURE: Reflow Time                           ;
08E2            518   ;-------------------------------------;
08E2            519   conf_reflowTime:
08E2            520       ; CHECK: [STATE], [UP], [DOWN]
08E2            521       ; reflow time setting interface
08E2 C0E0       522            push   acc
08E4 7401       522            mov    a,  #1
08E6 14         522            dec    a
08E7 1200C1     522            lcall  ?LCD_cursor_1 ; Select column and row
08EA D0E0       522            pop    acc
08EC C083       523            push   dph
08EE C082       523            push   dpl
08F0 C0E0       523            push   acc
08F2 9003A1     523            mov    dptr, #msg_reflowTime
08F5 1200B4     523            lcall  ?LCD_print
08F8 D0E0       523            pop    acc
08FA D082       523            pop    dpl
08FC D083       523            pop    dph
08FE C0E0       524            push   acc
0900 7401       524            mov    a,  #1
0902 14         524            dec    a
0903 1200BF     524            lcall  ?LCD_cursor_2 ; Select column and row
0906 D0E0       524            pop    acc
0908 C083       525            push   dph
090A C082       525            push   dpl
090C C0E0       525            push   acc
090E 9003C3     525            mov    dptr, #msg_time
0911 1200B4     525            lcall  ?LCD_print
0914 D0E0       525            pop    acc
0916 D082       525            pop    dpl
0918 D083       525            pop    dph
091A            526   conf_reflowTime_update:
091A C0E0       527       push    ACC
091C C002       527       push    AR2
091E C003       527       push    AR3
0920            527   
0920 E533       527            mov     a, reflowTime
0922 75F03C     527       mov          b, #60
0925 84         527       div          ab                              ; minutes are in a, seconds are in b
0926            527   
0926 AAF0       527            mov             R2, b
0928            527   
0928 75F00A     527       mov          b, #10
092B 84         527       div          ab                              ; result is in a, remainder is in b
092C C0E0       527            push   acc
092E 7406       527            mov    a,  #6
0930 14         527            dec    a
0931 1200BF     527            lcall  ?LCD_cursor_2 ; Select column and row
0934 D0E0       527            pop    acc
0936 2430       527       add          a, #0x30
0938 FB         527       mov          R3, a
0939 C0E0       527            push acc
093B EB         527            mov a, R3
093C 12007E     527            lcall ?LCD_write
093F D0E0       527            pop acc
0941            527   
0941 C0E0       527            push   acc
0943 7407       527            mov    a,  #7
0945 14         527            dec    a
0946 1200BF     527            lcall  ?LCD_cursor_2 ; Select column and row
0949 D0E0       527            pop    acc
094B E5F0       527       mov          a, b
094D 2430       527       add          a, #0x30
094F F5F0       527       mov          b, a
0951 C0E0       527            push acc
0953 E5F0       527            mov a, b
0955 12007E     527            lcall ?LCD_write
0958 D0E0       527            pop acc
095A            527   
095A 75F00A     527       mov          b, #10
095D EA         527       mov          a, R2
095E 84         527       div          ab
095F C0E0       527            push   acc
0961 7409       527            mov    a,  #9
0963 14         527            dec    a
0964 1200BF     527            lcall  ?LCD_cursor_2 ; Select column and row
0967 D0E0       527            pop    acc
0969 2430       527       add          a, #0x30
096B FB         527       mov          R3, a
096C C0E0       527            push acc
096E EB         527            mov a, R3
096F 12007E     527            lcall ?LCD_write
0972 D0E0       527            pop acc
0974            527   
0974 C0E0       527            push   acc
0976 740A       527            mov    a,  #10
0978 14         527            dec    a
0979 1200BF     527            lcall  ?LCD_cursor_2 ; Select column and row
097C D0E0       527            pop    acc
097E E5F0       527       mov          a, b
0980 2430       527       add          a, #0x30
0982 F5F0       527       mov          b, a
0984 C0E0       527            push acc
0986 E5F0       527            mov a, b
0988 12007E     527            lcall ?LCD_write
098B D0E0       527            pop acc
098D            527   
098D D002       527       pop     AR2
098F D003       527       pop     AR3
0991            527       ; pop     B
0991 D0E0       527       pop     ACC
0993            528   
0993            529   conf_reflowTime_button_up:
0993            530       ; [UP]  increase reflow time by 5 seconds
0993 20A619     531       jb           BTN_UP, conf_reflowTime_button_down
0996 C002       532            push   AR2
0998 7A32       532            mov    R2,     #DEBOUNCE
099A 12002E     532            lcall  ?sleep
099D D002       532            pop    AR2
099F 20A60D     533            jb              BTN_UP, conf_reflowTime_button_down
09A2 30A6FD     534            jnb     BTN_UP, $
09A5 C0E0       535       push    ACC
09A7 E533       535       mov     a,      reflowTime
09A9 2405       535       add     a,      #0x05
09AB            535       ; TODO do i need decimal adjust here?
09AB F533       535       mov     reflowTime,     a
09AD D0E0       535       pop     ACC
09AF            536   
09AF            537   conf_reflowTime_button_down:
09AF            538       ; [UP]  decrease reflow time by 5 seconds
09AF 20A724     539       jb           BTN_DOWN, conf_reflowTime_button_state
09B2 C002       540            push   AR2
09B4 7A32       540            mov    R2,     #DEBOUNCE
09B6 12002E     540            lcall  ?sleep
09B9 D002       540            pop    AR2
09BB 20A718     541            jb              BTN_DOWN, conf_reflowTime_button_state
09BE 30A7FD     542            jnb     BTN_DOWN, $
09C1 C0E0       543       push    ACC
09C3 C000       543       push    AR0
09C5            543       ; get second param - how many to subtract
09C5 7405       543       mov     a,      #0x05
09C7 14         543       dec     a
09C8 F8         543       mov     R0,     a
09C9 74FF       543       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
09CB 98         543       subb    a,      R0
09CC F8         543       mov     R0,     a   ; computed compliment, store in R0
09CD E533       543       mov     a,      reflowTime
09CF 28         543       add      a,      R0
09D0            543       ; decimal adjust here?
09D0 F533       543       mov     reflowTime,     a
09D2 D000       543       pop     AR0
09D4 D0E0       543       pop     ACC
09D6            544   
09D6            545   conf_reflowTime_button_state:
09D6            546       ; [STATE] save reflow time and move on
09D6 20A512     547       jb           BTN_STATE, conf_reflowTime_j
09D9 C002       548            push   AR2
09DB 7A32       548            mov    R2,     #DEBOUNCE
09DD 12002E     548            lcall  ?sleep
09E0 D002       548            pop    AR2
09E2 20A506     549            jb              BTN_STATE, conf_reflowTime_j
09E5 30A5FD     550            jnb     BTN_STATE, $
09E8 020538     551       ljmp         main
09EB            552   
09EB            553   conf_reflowTime_j:
09EB 02091A     554            ljmp    conf_reflowTime_update
09EE            555   
09EE            556   ;------------------------------;
09EE            557   ;                FUNCTION CALLS             ;
09EE            558   ;------------------------------;
09EE            559   ; increment soak time by 5 seconds
09EE            560   ; inc_soak_time:
09EE            561   ;        mov     a, soakTime
09EE            562   ;     add                a, #0x05
09EE            563   ;     mov                soakTime, a
09EE            564   ;        ret
09EE            565   ;
09EE            566   ; ; decrement soak time by 5 seconds
09EE            567   ; dec_soak_time:
09EE            568   ;        mov             a, soakTime
09EE            569   ;     add                a, #0xFB
09EE            570   ;     mov                soakTime, a
09EE            571   ;        ret
09EE            572   ;
09EE            573   ; inc_reflow_time:
09EE            574   ;     mov        a, reflowTime
09EE            575   ;     add                a, #0x05
09EE            576   ;     mov                reflowTime, a
09EE            577   ;        ret
09EE            578   ;
09EE            579   ; dec_reflow_time:
09EE            580   ;        mov     a, reflowTime
09EE            581   ;     add                a, #0xFB
09EE            582   ;     mov                reflowTime, a
09EE            583   ;        ret
09EE            584   
09EE            585   ; === END OF PROGRAM ===
09EE            586   END
