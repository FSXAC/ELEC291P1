0000              1   ;LIT SOLDER OVEN CONTROLLER
0000              2   ; AUTHOR:   SCOTT BEAULIEU (no contributions yet)
0000              3   ;                        GEOFF GOODWIN
0000              4   ;                        MUCHEN HE
0000              5   ;                        LARRY LIU
0000              6   ;                        LUFEI LIU
0000              7   ;                        WENOA TEVES
0000              8   ; VERSION:       0
0000              9   ; LAST REVISION:         2017-02-05
0000             10   ; http:;i.imgur.com/7wOfG4U.gif
0000             11   
0000             12   
0000             13   org 0x0000
0000 0204CA      14       ljmp    setup
0003             15   ; org 0x000B
0003             16   ;     ljmp    T0_ISR
002B             17   org 0x002B
002B 020409      18       ljmp    T2_ISR
002E             19   
002E             20   ; standard library
                 22   $LIST
                 -1   $include(macros.inc)
002E              1   ;===SLEEP===
                  2   sleep mac
                  3   	push   AR2
                  4   	mov    R2,     %0
                  5   	lcall  ?sleep
                  6   	pop    AR2
                  7   endmac
002E              8   ?sleep:
002E C000         9       push    AR0
0030 C001        10       push    AR1
0032 792D        11   L3: mov     R1,     #45
0034 78A6        12   L2: mov     R0,     #166
0036 D8FE        13   L1: djnz    R0,     L1 ; 3 cycles->3*45.21123ns*166=22.51519us
0038 D9FA        14       djnz    R1,     L2 ; 22.51519us*45=1.013ms
003A DAF6        15       djnz    R2,     L3 ; number of millisecons to wait passed in R2
003C D001        16       pop     AR1
003E D000        17       pop     AR0
0040 22          18       ret
0041             19   
0041             20   ;===SEND BCD VIA SPI===
0041             21   ; putBCD mac
0041             22   ;     push    AR0
0041             23   ;     mov     R0,     %0
0041             24   ;     lcall   ?putBCD
0041             25   ;     pop     AR0
0041             26   ; endmac
0041             27   ; ?putBCD:
0041             28   ;     push    ACC
0041             29   ;     ; Write most significant digit
0041             30   ;     mov     a,  R0
0041             31   ;     swap    a
0041             32   ;     anl     a,  #0fh
0041             33   ;     orl     a,  #30h
0041             34   ;     lcall   putChar
0041             35   ;     ; write least significant digit
0041             36   ;     mov     a,  R0
0041             37   ;     anl     a,  #0fh
0041             38   ;     orl     a,  #30h
0041             39   ;     lcall   putChar
0041             40   ;     pop     acc
0041             41   ;     ret
0041             42   ; ; === HELPER FUNCTIONS FOR PRINT SPI
0041             43   ; ; send character using serial port
0041             44   ; putChar:
0041             45   ;     jnb     TI,     putchar
0041             46   ;     clr     TI
0041             47   ;     mov     SBUF,   a
0041             48   ;     ret
0041             49   ;
0041             50   ; ; send a string using serial port
0041             51   ; putString:
0041             52   ;     clr     a
0041             53   ;     movc    a,  @a+dptr
0041             54   ;     jz      putString_return
0041             55   ;     lcall   putChar
0041             56   ;     inc     dptr
0041             57   ;     sjmp    putString
0041             58   ; putString_return:
0041             59   ;     ret
0041             60   
0041             61   ;===DISPLAY TO LED BAR===
0041             62   ; barLED mac
0041             63   ;     push    ACC
0041             64   ;     push    AR0
0041             65   ;     mov     R0,     %0
0041             66   ;     mov     a,      #8
0041             67   ;     subb    a,      R0
0041             68   ;     lcall   ?barLED
0041             69   ;     pop     AR0
0041             70   ;     pop     ACC
0041             71   ; endmac
0041             72   ; ?barLED:
0041             73   ;     clr     LED_CLR
0041             74   ;     clr     LED_CLK
0041             75   ;     clr     LED_LATCH
0041             76   ;     setb    LED_DATA
0041             77   ;     setb    LED_CLR
0041             78   ; barLED_1:
0041             79   ;     cpl     LED_CLK
0041             80   ;     cpl     LED_CLK
0041             81   ;     djnz    R0, barLED_1
0041             82   ;
0041             83   ;     mov     R0, a
0041             84   ;     ; inc     R0
0041             85   ;     clr     LED_DATA
0041             86   ;     jz      barLED_end
0041             87   ; barLED_2:
0041             88   ;     cpl     LED_CLK
0041             89   ;     cpl     LED_CLK
0041             90   ;     djnz    R0, barLED_2
0041             91   ; barLED_end:
0041             92   ;     setb    LED_LATCH
0041             93   ;     ret
0041             94   
0041             95   ; -------------------------;
0041             96   ; Increment Macro                   ;
0041             97   ; -------------------------;
                 98   increment_BCD mac
                 99       push    ACC
                100       mov     a,      %0
                101       add     a,      %1
                102       ; TODO do i need decimal adjust here?
                103       mov     %0,     a
                104       pop     ACC
                105   endmac
0041            106   
0041            107   ; -------------------------;
0041            108   ; Decrement Macro                   ;
0041            109   ; -------------------------;
                110   decrement_BCD mac
                111       push    ACC
                112       push    AR0
                113       ; get second param - how many to subtract
                114       mov     a,      %1
                115       dec     a
                116       mov     R0,     a
                117       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
                118       subb    a,      R0
                119       mov     R0,     a   ; computed compliment, store in R0
                120       mov     a,      %0
                121       add	    a,      R0
                122       ; decimal adjust here?
                123       mov     %0,     a
                124       pop     AR0
                125       pop     ACC
                126   endmac
0041            127   
0041            128   ; -------------------------;
0041            129   ; Print Time Macro                  ;
0041            130   ; -------------------------;
                131   LCD_printTime mac
                132       push    ACC
                133       push    AR2
                134       push    AR3
                135   
                136   	mov 	a, %0
                137       mov 	b, #60
                138       div		ab				; minutes are in a, seconds are in b
                139   
                140   	mov		R2, b
                141   
                142       mov 	b, #10
                143       div		ab				; result is in a, remainder is in b
                144       LCD_cursor(2, 6)
                145       add		a, #0x30
                146       mov		R3, a
                147       LCD_printChar(R3)
                148   
                149       LCD_cursor(2, 7)
                150       mov		a, b
                151       add		a, #0x30
                152       mov		b, a
                153       LCD_printChar(b)
                154   
                155       mov		b, #10
                156       mov		a, R2
                157       div		ab
                158       LCD_cursor(2, 9)
                159       add		a, #0x30
                160       mov		R3, a
                161       LCD_printChar(R3)
                162   
                163       LCD_cursor(2, 10)
                164       mov		a, b
                165       add		a, #0x30
                166       mov		b, a
                167       LCD_printChar(b)
                168   
                169       pop     AR2
                170       pop     AR3
                171       ; pop     B
                172       pop     ACC
                173   endmac
0041            174   
0041            175   ; -------------------------;
0041            176   ; Print Temp Macro                  ;
0041            177   ; -------------------------;
                178   LCD_printTemp mac
                179       push    ACC
                180       push    AR1
                181   
                182   	mov 	a, %0
                183       mov 	b, #100
                184       div		ab				; result is in a, remainder is in b
                185       LCD_cursor(2, 7)
                186       add		a, #0x30
                187       mov		R1, a
                188       LCD_printChar(R1)
                189       mov		a, b
                190       mov		b, #10
                191       div		ab
                192       add		a, #0x30
                193       mov		R1, a
                194       LCD_cursor(2, 8)
                195       LCD_printChar(R1)
                196       LCD_cursor(2, 9)
                197       mov		a, b
                198       add		a, #0x30
                199       mov		b, a
                200       LCD_printChar(b)
                201   
                202       push    AR1
                203       push    ACC
                204   endmac
                 -1   $include(LCD_4bit.inc)
0041              1   cseg
0041              2   
0041              3   ; When using a 22.1184MHz crystal in fast mode
0041              4   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
0041              5   
0041              6   ;---------------------------------;
0041              7   ; Wait 40 microseconds            ;
0041              8   ;---------------------------------;
0041              9   sleep40us:
0041 C000        10            push AR0
0043 78B1        11            mov R0, #177
0045             12   L0:
0045 00          13            nop
0046 00          14            nop
0047 D8FC        15            djnz R0, L0 ; 1+1+3 cycles->5*45.21123ns*177=40us
0049 D000        16            pop AR0
004B 22          17       ret
004C             18   
004C             19   ;===WAIT []ms===
004C             20   ; sleep mac
004C             21   ;        push AR2
004C             22   ;        mov R2, %0
004C             23   ;        lcall ?sleep
004C             24   ;        pop AR2
004C             25   ; endmac
004C             26   ; ?sleep:
004C             27   ;        push AR0
004C             28   ;        push AR1
004C             29   ; L3: mov R1, #45
004C             30   ; L2: mov R0, #166
004C             31   ; L1: djnz R0, L1 ; 3 cycles->3*45.21123ns*166=22.51519us
004C             32   ;     djnz R1, L2 ; 22.51519us*45=1.013ms
004C             33   ;     djnz R2, L3 ; number of millisecons to wait passed in R2
004C             34   ;     pop AR1
004C             35   ;     pop AR0
004C             36   ;     ret
004C             37   
004C             38   ;---------------------------------;
004C             39   ; Toggles the 'E' pin in the LCD  ;
004C             40   ;---------------------------------;
004C             41   LCD_pulse:
004C D294        42            setb LCD_E
004E 120041      43            lcall sleep40us
0051 C294        44            clr LCD_E
0053 22          45       ret
0054             46   
0054             47   ;---------------------------------;
0054             48   ; Writes acc to LCD in 4-bit mode ;
0054             49   ;---------------------------------;
0054             50   LCD_byte:
0054             51            ; Write high 4 bits first
0054 A2E7        52            mov c, ACC.7
0056 92B5        53            mov LCD_D7, c
0058 A2E6        54            mov c, ACC.6
005A 92B4        55            mov LCD_D6, c
005C A2E5        56            mov c, ACC.5
005E 92B3        57            mov LCD_D5, c
0060 A2E4        58            mov c, ACC.4
0062 92B2        59            mov LCD_D4, c
0064 12004C      60       lcall LCD_pulse
0067 120041      61       lcall sleep40us
006A             62            ; Write low 4 bits next
006A A2E3        63            mov c, ACC.3
006C 92B5        64            mov LCD_D7, c
006E A2E2        65            mov c, ACC.2
0070 92B4        66            mov LCD_D6, c
0072 A2E1        67            mov c, ACC.1
0074 92B3        68            mov LCD_D5, c
0076 A2E0        69            mov c, ACC.0
0078 92B2        70            mov LCD_D4, c
007A 12004C      71       lcall LCD_pulse
007D 22          72            ret
007E             73   
007E             74   ;---------------------------------;
007E             75   ; Write data to LCD               ;
007E             76   ;---------------------------------;
                 77   LCD_write mac
                 78   	mov a, %0
                 79   	lcall ?LCD_write
                 80   endmac
007E             81   ?LCD_write:
007E D292        82            setb LCD_RS
0080 020054      83            ljmp LCD_byte
0083             84   
0083             85   ;---------------------------------;
0083             86   ; Write command to LCD            ;
0083             87   ;---------------------------------;
                 88   LCD_cmd mac
                 89   	mov a, %0
                 90   	lcall ?LCD_cmd
                 91   endmac
0083             92   ?LCD_cmd:
0083 C292        93            clr LCD_RS
0085 020054      94            ljmp LCD_byte
0088             95   
0088             96   ;---------------------------------;
0088             97   ; Configure LCD in 4-bit mode     ;
0088             98   ;---------------------------------;
0088             99   LCD_config:
0088 C294       100            clr LCD_E   ; Resting state of LCD's enable pin is zero
008A C293       101            clr LCD_RW  ; We are only writing to the LCD in this program
008C            102            ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
008C 7433       103            mov a, #0x33
008E 120083     103            lcall ?LCD_cmd
0091 7433       104            mov a, #0x33
0093 120083     104            lcall ?LCD_cmd
0096 7432       105            mov a, #0x32
0098 120083     105            lcall ?LCD_cmd ; change to 4-bit mode
009B            106            ; Configure the LCD
009B 7428       107            mov a, #0x28
009D 120083     107            lcall ?LCD_cmd
00A0 740C       108            mov a, #0x0c
00A2 120083     108            lcall ?LCD_cmd
00A5 7401       109            mov a, #0x01
00A7 120083     109            lcall ?LCD_cmd ;  Clear screen command (takes some time)
00AA            110   
00AA            111       ;Wait for the clear screen command to finish.
00AA C002       112            push   AR2
00AC 7A02       112            mov    R2,     #2
00AE 12002E     112            lcall  ?sleep
00B1 D002       112            pop    AR2
00B3 22         113       ret
00B4            114   
00B4            115   ;---------------------------------;
00B4            116   ; Send a constant string to LCD   ;
00B4            117   ;---------------------------------;
                118   LCD_print mac
                119   	push   dph
                120   	push   dpl
                121   	push   acc
                122   	mov    dptr, %0
                123   	lcall  ?LCD_print
                124   	pop    acc
                125   	pop    dpl
                126   	pop    dph
                127   endmac
00B4            128   ?LCD_print:
00B4 E4         129       clr     a
00B5 93         130       movc    a,  @a+dptr
00B6 6006       131       jz      ?LCD_print_return
00B8 12007E     132       lcall   ?LCD_write
00BB A3         133       inc     dptr
00BC 80F6       134       sjmp    ?LCD_print
00BE            135   ?LCD_print_return:
00BE 22         136       ret
00BF            137   
00BF            138   ;---------------------------------;
00BF            139   ; Set LCD cursor at row, column   ;
00BF            140   ;---------------------------------;
                141   LCD_cursor mac
                142   	push   acc
                143   	mov    a,  #%1
                144   	dec    a
                145   	lcall  ?LCD_cursor_%0 ; Select column and row
                146   	pop    acc
                147   endmac
00BF            148   ?LCD_cursor_2:
00BF 4440       149            orl    a,  #01000000B
00C1            150   ?LCD_cursor_1:
00C1 4480       151            orl    a,  #10000000B
00C3 020083     152            ljmp   ?LCD_cmd ; Select column and row
00C6            153   
00C6            154   ;---------------------------------;
00C6            155   ; Display a BCD number in the LCD ;
00C6            156   ;---------------------------------;
                157   LCD_printBCD mac
                158   	push ar0
                159   	mov r0, %0
                160   	lcall ?LCD_printBCD
                161   	pop ar0
                162   endmac
00C6            163   ?LCD_printBCD:
00C6 C0E0       164            push acc
00C8            165            ; Write most significant digit
00C8 E8         166            mov a, r0
00C9 C4         167            swap a
00CA 540F       168            anl a, #0fh
00CC 4430       169            orl a, #30h
00CE 12007E     170            lcall ?LCD_write
00D1            171            ; write least significant digit
00D1 E8         172            mov a, r0
00D2 540F       173            anl a, #0fh
00D4 4430       174            orl a, #30h
00D6 12007E     175            lcall ?LCD_write
00D9 D0E0       176            pop acc
00DB 22         177            ret
00DC            178   
00DC            179   ;------------------------------------;
00DC            180   ; Display a char in the LCD          ;
00DC            181   ;------------------------------------;
                182   LCD_printChar mac
                183   	push acc
                184   	mov a, %0
                185   	lcall ?LCD_write
                186   	pop acc
                187   endmac
                 -1   $include(math32.inc)
                541   $LIST
034C             27   
034C             28   ; Preprocessor constants
034C             29   CLK             equ     22118400
034C             30   BAUD            equ     115200
034C             31   ; T0_RATE         equ     4096
034C             32   ; T0_RELOAD       equ     ((65536-(CLK/4096)))
034C             33   T1_RELOAD       equ     (0x100-CLK/(16*BAUD))
034C             34   T2_RATE         equ     1000
034C             35   T2_RELOAD       equ     (65536-(CLK/T2_RATE))
034C             36   DEBOUNCE        equ     50
034C             37   TIME_RATE       equ     1000
034C             38   
034C             39   ; LCD PINS
034C             40   LCD_RS          equ     P1.2
034C             41   LCD_RW          equ     P1.3
034C             42   LCD_E           equ     P1.4
034C             43   LCD_D4          equ     P3.2
034C             44   LCD_D5          equ     P3.3
034C             45   LCD_D6          equ     P3.4
034C             46   LCD_D7          equ     P3.5
034C             47   
034C             48   ; BUTTONS PINs
034C             49   BTN_START        equ     P2.4
034C             50   BTN_STATE            equ         P2.5
034C             51   BTN_UP           equ     P2.6
034C             52   BTN_DOWN                 equ     P2.7
034C             53   
034C             54   ; ADC SPI PINS
034C             55   ADC_CE      equ     P2.0
034C             56   ADC_MOSI    equ     P2.1
034C             57   ADC_MISO    equ     P2.2
034C             58   ADC_SCLK    equ     P2.3
034C             59   
034C             60   ; States
034C             61   RAMP2SOAK                equ     1
034C             62   PREHEAT_SOAK     equ     2
034C             63   RAMP2PEAK                equ     3
034C             64   REFLOW                   equ     4
034C             65   COOLING                  equ     5
034C             66   
034C             67   
034C             68   ; Parameters
0030             69   dseg at 0x30
0030             70       soakTemp:       ds  1
0031             71       soakTime:       ds  1
0032             72       reflowTemp:     ds  1
0033             73       reflowTime:     ds  1
0034             74       seconds:        ds  1
0035             75       minutes:        ds  1
0036             76       countms:        ds  2
0038             77       state:          ds  1 ; current state of the controller
0039             78       crtTemp:         ds  1                       ; temperature of oven
003A             79   
003A             80       ; for math32
003A             81       result:         ds  2
003C             82       bcd:            ds  5
0041             83       x:              ds  4
0045             84       y:              ds  4
0049             85   
0000             86   bseg
0000             87       seconds_flag:        dbit 1
0001             88       ongoing_flag:        dbit 1                  ;only check for buttons when the process has not started (JK just realized we might not need this..)
0002             89   
0002             90       ; for math32
0002             91       mf:             dbit 1
0003             92   
034C             93   cseg
034C             94   ; LCD SCREEN
034C             95   ;                        1234567890123456
034C 53544154    96   msg_main_top:            db 'STATE:-  T=--- C', 0  ;State: 1-5
     453A2D20
     20543D2D
     2D2D2043
     00
035D 20202054    97   msg_main_btm:            db '   TIME --:--   ', 0  ;elapsed time
     494D4520
     2D2D3A2D
     2D202020
     00
036E 534F414B    98   msg_soakTemp:       db 'SOAK TEMP:     <', 0
     2054454D
     503A2020
     2020203C
     00
037F 534F414B    99   msg_soakTime:       db 'SOAK TIME:     <', 0
     2054494D
     453A2020
     2020203C
     00
0390 5245464C   100   msg_reflowTemp:      db 'REFLOW TEMP:   <', 0
     4F572054
     454D503A
     2020203C
     00
03A1 5245464C   101   msg_reflowTime:      db 'REFLOW TIME:   <', 0
     4F572054
     494D453A
     2020203C
     00
03B2 20202020   102   msg_temp:                db '      --- C    >', 0
     20202D2D
     2D204320
     2020203E
     00
03C3 20202020   103   msg_time:                db '     --:--     >', 0
     202D2D3A
     2D2D2020
     2020203E
     00
03D4 20202052   104   msg_state1:         db '   RampToSoak   ', 0
     616D7054
     6F536F61
     6B202020
     00
03E5 20202D2D   105   msg_fsm:            db '  --- C  --:--  ', 0
     2D204320
     202D2D3A
     2D2D2020
     00
03F6            106   
03F6            107   ; -------------------------;
03F6            108   ; Initialize Timer 2        ;
03F6            109   ; -------------------------;
03F6            110   T2_init:
03F6 75C800     111       mov          T2CON,          #0
03F9 75CBA9     112       mov          RCAP2H, #high(T2_RELOAD)
03FC 75CA9A     113       mov          RCAP2L, #low(T2_RELOAD)
03FF E4         114       clr          a
0400 F536       115       mov          countms+0, a
0402 F537       116       mov          countms+1, a
0404 D2AD       117       setb         ET2  ; Enable timer 2 interrupt
0406 D2CA       118       setb         TR2  ; Enable timer 2
0408 22         119       ret
0409            120   
0409            121   ;---------------------------------;
0409            122   ; ISR for timer 2                 ;
0409            123   ;---------------------------------;
0409            124   T2_ISR:
0409 C2CF       125       clr          TF2
040B C0E0       126       push         acc
040D C0D0       127       push         psw
040F C001       128       push         AR1
0411 0536       129       inc          countms+0
0413 E536       130       mov          a,     countms+0
0415 7002       131       jnz          T2_ISR_incDone
0417 0537       132       inc          countms+1
0419            133   T2_ISR_incDone:
0419            134            ; Check if half second has passed
0419 E536       135       mov     a,  countms+0
041B B4E82C     136       cjne    a,  #low(TIME_RATE),    T2_ISR_return
041E E537       137       mov     a,  countms+1
0420 B40327     138       cjne    a,  #high(TIME_RATE),   T2_ISR_return
0423 D200       139       setb         seconds_flag
0425            140       ; reset 16 bit ms counter
0425 E4         141       clr          a
0426 F536       142       mov          countms+0,     a
0428 F537       143       mov          countms+1,     a
042A            144       ; Increment seconds
042A E534       145       mov     a,   seconds
042C 2401       146       add     a,   #0x01
042E            147       ; BCD Conversion and writeback
042E D4         148       da       a
042F F534       149       mov     seconds,    a
0431            150       ; increment minutes when seconds -> 60
0431 C3         151       clr     c
0432 9460       152       subb    a,          #0x60
0434 6002       153       jz       T2_ISR_minutes
0436 8012       154       sjmp         T2_ISR_return
0438            155   T2_ISR_minutes:
0438 E535       156       mov     a,          minutes
043A 2401       157       add     a,          #0x01
043C D4         158       da       a
043D F535       159       mov     minutes,    a
043F 753400     160       mov     seconds,    #0x00
0442            161       ; reset minute to 0 when minutes -> 60
0442 C3         162       clr     c
0443 9460       163       subb    a,          #0x60
0445 7003       164       jnz     T2_ISR_return
0447 753500     165       mov     minutes,    #0x00
044A            166   T2_ISR_return:
044A D001       167       pop          AR1
044C D0D0       168       pop          psw
044E D0E0       169       pop          acc
0450 32         170       reti
0451            171   
0451            172   ;-----------------------------;
0451            173   ; Initialize SPI                       ;
0451            174   ;-----------------------------;
0451            175   SPI_init:
0451            176       ; debounce reset button
0451 79DE       177       mov     R1,     #222
0453 78A6       178       mov     R0,     #166
0455 D8FE       179       djnz    R0,     $
0457 D9FA       180       djnz    R1,     $-4
0459            181       ; set timer
0459 C28E       182       clr     TR1
045B 53890F     183       anl     TMOD,   #0x0f
045E 438920     184       orl      TMOD,   #0x20
0461 438780     185       orl      PCON,   #0x80
0464 758DF4     186       mov      TH1,    #T1_RELOAD
0467 758BF4     187       mov      TL1,    #T1_RELOAD
046A D28E       188       setb    TR1
046C 759852     189       mov      SCON,   #0x52
046F 22         190       ret
0470            191   ;-----------------------------;
0470            192   ; Initialize comm to ADC      ;
0470            193   ;-----------------------------;
0470            194   ADC_init:
0470 D2A2       195       setb    ADC_MISO
0472 C2A3       196       clr     ADC_SCLK
0474 22         197       ret
0475            198   ;-----------------------------;
0475            199   ; Communicate with ADC        ;
0475            200   ;-----------------------------;
0475            201   ; send byte in R0, receive byte in R1
0475            202   ADC_comm:
0475 C0E0       203       push    ACC
0477 7900       204       mov     R1,     #0
0479 7A08       205       mov     R2,     #8
047B            206   ADC_comm_loop:
047B E8         207       mov     a,      R0
047C 33         208       rlc     a
047D F8         209       mov     R0,     a
047E 92A1       210       mov     ADC_MOSI,   c
0480 D2A3       211       setb    ADC_SCLK
0482 A2A2       212       mov     c,      ADC_MISO
0484 E9         213       mov     a,      R1
0485 33         214       rlc     a
0486 F9         215       mov     R1,     a
0487 C2A3       216       clr     ADC_SCLK
0489 DAF0       217       djnz    R2,     ADC_comm_loop
048B D0E0       218       pop     ACC
048D 22         219       ret
048E            220   
048E            221   ;-----------------------------;
048E            222   ; Get number from ADC         ;
048E            223   ;-----------------------------;
048E            224   ADC_get:
048E C0E0       225       push    ACC
0490 C000       226       push    AR0
0492 C001       227       push    AR1
0494 C2A0       228       clr     ADC_CE
0496            229   
0496            230       ; starting bit is set to 1
0496 7801       231       mov     R0,     #0x01
0498 120475     232       lcall   ADC_comm
049B            233   
049B            234       ; read channel 0 and save to result
049B            235       ; read lower 2 bits of upper byte: ------XX --------
049B 7880       236       mov     R0,         #0x80
049D 120475     237       lcall   ADC_comm
04A0 E9         238       mov     a,          R1
04A1 5403       239       anl     a,          #0x03
04A3 F53B       240       mov     result+1,   a
04A5            241   
04A5            242       ; read lower byte: -------- XXXXXXXX
04A5 7855       243       mov     R0,         #0x55   ; random command
04A7 120475     244       lcall   ADC_comm
04AA 893A       245       mov     result,     R1
04AC D2A0       246       setb    ADC_CE
04AE            247   
04AE            248       ; delay
04AE            249       ; sleep(#50)
04AE            250   
04AE            251       ; convert result into BCD using math32
04AE 853A41     252       mov     x,      result
04B1 853B42     253       mov     x+1,    result+1
04B4 754300     254       mov     x+2,    #0x00
04B7 754400     255       mov     x+3,    #0x00
04BA 1200DC     256       lcall   hex2bcd
04BD 853C3A     257       mov     result,     bcd
04C0 853D3B     258       mov     result+1,   bcd+1
04C3            259   
04C3            260       ; restore registers
04C3 D001       261       pop     AR1
04C5 D000       262       pop     AR0
04C7 D0E0       263       pop     ACC
04C9 22         264       ret
04CA            265   
04CA            266   ;-----------------------------;
04CA            267   ;        MAIN PROGRAM                  ;
04CA            268   ;-----------------------------;
04CA            269   setup:
04CA 75817F     270       mov     SP,     #0x7F
04CD 75C100     271       mov     PMOD,   #0
04D0            272   
04D0            273       ; Timer setup
04D0 1203F6     274       lcall   T2_init
04D3 D2AF       275       setb    EA
04D5            276   
04D5            277       ; LCD setup
04D5 120088     278       lcall   LCD_config
04D8            279   
04D8            280       ; Initialize MCP3008 ADC
04D8 D2A0       281       setb    ADC_CE
04DA 120470     282       lcall   ADC_init
04DD 120451     283       lcall   SPI_init
04E0            284   
04E0            285       ; Variables declaration
04E0 C201       286       clr      ongoing_flag
04E2 D200       287       setb    seconds_flag                                         ; may not need this..
04E4 753400     288       mov     seconds,        #0x00                        ; initialize variables
04E7 753500     289       mov     minutes,        #0x00
04EA 753000     290       mov      soakTemp,       #0x00
04ED 753100     291       mov      soakTime,       #0x00
04F0 753200     292       mov     reflowTemp,     #0x00
04F3 753300     293       mov     reflowTime,     #0x00
04F6 753900     294            mov     crtTemp,        #0x00               ; temporary for testing purposes
04F9            295   main:
04F9            296       ; MAIN MENU LOOP
04F9            297       ; CHECK: [START], [STATE]
04F9 C0E0       298            push   acc
04FB 7401       298            mov    a,  #1
04FD 14         298            dec    a
04FE 1200C1     298            lcall  ?LCD_cursor_1 ; Select column and row
0501 D0E0       298            pop    acc
0503 C083       299            push   dph
0505 C082       299            push   dpl
0507 C0E0       299            push   acc
0509 90034C     299            mov    dptr, #msg_main_top
050C 1200B4     299            lcall  ?LCD_print
050F D0E0       299            pop    acc
0511 D082       299            pop    dpl
0513 D083       299            pop    dph
0515 C0E0       300            push   acc
0517 7401       300            mov    a,  #1
0519 14         300            dec    a
051A 1200BF     300            lcall  ?LCD_cursor_2 ; Select column and row
051D D0E0       300            pop    acc
051F            300   
051F C083       301            push   dph
0521 C082       301            push   dpl
0523 C0E0       301            push   acc
0525 90035D     301            mov    dptr, #msg_main_btm
0528 1200B4     301            lcall  ?LCD_print
052B D0E0       301            pop    acc
052D D082       301            pop    dpl
052F D083       301            pop    dph
0531 C0E0       302            push   acc
0533 740F       302            mov    a,  #15
0535 14         302            dec    a
0536 1200C1     302            lcall  ?LCD_cursor_1 ; Select column and row
0539 D0E0       302            pop    acc
053B C0E0       303            push acc
053D 74DF       303            mov a, #0xDF
053F 12007E     303            lcall ?LCD_write
0542 D0E0       303            pop acc    ; deg symbol
0544            304   main_button_start:
0544            305       ; [START] - start the reflow program
0544 20A411     306       jb           BTN_START, main_button_state
0547 C002       307            push   AR2
0549 7A32       307            mov    R2,     #DEBOUNCE
054B 12002E     307            lcall  ?sleep
054E D002       307            pop    AR2
0550 20A405     308       jb           BTN_START, main_button_state
0553 30A4FD     309       jnb          BTN_START, $
0556 D201       310       setb         ongoing_flag
0558            311   
0558            312       ; **PUT WHAT HAPPENS IF YOU PRESS START HERE LMAO HELP ME LORD (whatever goes here has to connect to main_update and check for stop button)
0558            313   
0558            314   main_button_state:
0558            315       ; [STATE] - configure reflow program
0558 200115     316            jb              ongoing_flag, main_update       ; skip checking for state if process has started
055B 20A512     317       jb           BTN_STATE, main_update
055E C002       318            push   AR2
0560 7A32       318            mov    R2,     #DEBOUNCE
0562 12002E     318            lcall  ?sleep
0565 D002       318            pop    AR2
0567 20A506     319       jb           BTN_STATE, main_update
056A 30A5FD     320       jnb          BTN_STATE, $
056D 0205AF     321       ljmp    conf_soakTemp
0570            322   main_update:
0570            323       ; read ADC via SPI -> result
0570 12048E     324       lcall   ADC_get
0573            325   
0573            326       ; *** CONTINUE HERE
0573            327   
0573            328            ; update time and ** temperature display here
0573 C0E0       329            push   acc
0575 7409       329            mov    a,  #9
0577 14         329            dec    a
0578 1200BF     329            lcall  ?LCD_cursor_2 ; Select column and row
057B D0E0       329            pop    acc
057D C000       330            push ar0
057F A835       330            mov r0, minutes
0581 1200C6     330            lcall ?LCD_printBCD
0584 D000       330            pop ar0
0586 C0E0       331            push   acc
0588 740C       331            mov    a,  #12
058A 14         331            dec    a
058B 1200BF     331            lcall  ?LCD_cursor_2 ; Select column and row
058E D0E0       331            pop    acc
0590 C000       332            push ar0
0592 A834       332            mov r0, seconds
0594 1200C6     332            lcall ?LCD_printBCD
0597 D000       332            pop ar0
0599 C0E0       333            push   acc
059B 740C       333            mov    a,  #12
059D 14         333            dec    a
059E 1200C1     333            lcall  ?LCD_cursor_1 ; Select column and row
05A1 D0E0       333            pop    acc
05A3 C000       334            push ar0
05A5 A839       334            mov r0, crtTemp
05A7 1200C6     334            lcall ?LCD_printBCD
05AA D000       334            pop ar0 ; TODO FIXME
05AC 020544     335       ljmp         main_button_start
05AF            336   
05AF            337   ;-------------------------------------;
05AF            338   ; CONFIGURE: Soak Temperature              ;
05AF            339   ;-------------------------------------;
05AF            340   conf_soakTemp:
05AF            341       ; CHECK: [STATE], [UP], [DOWN]
05AF            342       ; soak temperature interface
05AF C0E0       343            push   acc
05B1 7401       343            mov    a,  #1
05B3 14         343            dec    a
05B4 1200C1     343            lcall  ?LCD_cursor_1 ; Select column and row
05B7 D0E0       343            pop    acc
05B9 C083       344            push   dph
05BB C082       344            push   dpl
05BD C0E0       344            push   acc
05BF 90036E     344            mov    dptr, #msg_soakTemp
05C2 1200B4     344            lcall  ?LCD_print
05C5 D0E0       344            pop    acc
05C7 D082       344            pop    dpl
05C9 D083       344            pop    dph
05CB C0E0       345            push   acc
05CD 7401       345            mov    a,  #1
05CF 14         345            dec    a
05D0 1200BF     345            lcall  ?LCD_cursor_2 ; Select column and row
05D3 D0E0       345            pop    acc
05D5            345   
05D5 C083       346            push   dph
05D7 C082       346            push   dpl
05D9 C0E0       346            push   acc
05DB 9003B2     346            mov    dptr, #msg_temp
05DE 1200B4     346            lcall  ?LCD_print
05E1 D0E0       346            pop    acc
05E3 D082       346            pop    dpl
05E5 D083       346            pop    dph
05E7            347   conf_soakTemp_update:
05E7 C0E0       348            push   acc
05E9 7407       348            mov    a,  #7
05EB 14         348            dec    a
05EC 1200BF     348            lcall  ?LCD_cursor_2 ; Select column and row
05EF D0E0       348            pop    acc
05F1 C0E0       349       push    ACC
05F3 C001       349       push    AR1
05F5            349   
05F5 E530       349            mov     a, soakTemp
05F7 75F064     349       mov          b, #100
05FA 84         349       div          ab                              ; result is in a, remainder is in b
05FB C0E0       349            push   acc
05FD 7407       349            mov    a,  #7
05FF 14         349            dec    a
0600 1200BF     349            lcall  ?LCD_cursor_2 ; Select column and row
0603 D0E0       349            pop    acc
0605 2430       349       add          a, #0x30
0607 F9         349       mov          R1, a
0608 C0E0       349            push acc
060A E9         349            mov a, R1
060B 12007E     349            lcall ?LCD_write
060E D0E0       349            pop acc
0610 E5F0       349       mov          a, b
0612 75F00A     349       mov          b, #10
0615 84         349       div          ab
0616 2430       349       add          a, #0x30
0618 F9         349       mov          R1, a
0619 C0E0       349            push   acc
061B 7408       349            mov    a,  #8
061D 14         349            dec    a
061E 1200BF     349            lcall  ?LCD_cursor_2 ; Select column and row
0621 D0E0       349            pop    acc
0623 C0E0       349            push acc
0625 E9         349            mov a, R1
0626 12007E     349            lcall ?LCD_write
0629 D0E0       349            pop acc
062B C0E0       349            push   acc
062D 7409       349            mov    a,  #9
062F 14         349            dec    a
0630 1200BF     349            lcall  ?LCD_cursor_2 ; Select column and row
0633 D0E0       349            pop    acc
0635 E5F0       349       mov          a, b
0637 2430       349       add          a, #0x30
0639 F5F0       349       mov          b, a
063B C0E0       349            push acc
063D E5F0       349            mov a, b
063F 12007E     349            lcall ?LCD_write
0642 D0E0       349            pop acc
0644            349   
0644 C001       349       push    AR1
0646 C0E0       349       push    ACC  ; display soak temperature on LCD
0648            350   
0648            351   conf_soakTemp_button_up:
0648            352       ; [UP] increment soak temperature by 1
0648 20A619     353       jb           BTN_UP, conf_soakTemp_button_down
064B C002       354            push   AR2
064D 7A32       354            mov    R2,     #DEBOUNCE
064F 12002E     354            lcall  ?sleep
0652 D002       354            pop    AR2
0654 20A60D     355       jb           BTN_UP, conf_soakTemp_button_down
0657 30A6FD     356       jnb          BTN_UP, $
065A C0E0       357       push    ACC
065C E530       357       mov     a,      soakTemp
065E 2401       357       add     a,      #1
0660            357       ; TODO do i need decimal adjust here?
0660 F530       357       mov     soakTemp,     a
0662 D0E0       357       pop     ACC
0664            358   
0664            359   conf_soakTemp_button_down:
0664            360       ; [DOWN] decrement soak temperature by 1
0664 20A724     361       jb           BTN_DOWN, conf_soakTemp_button_state
0667 C002       362            push   AR2
0669 7A32       362            mov    R2,     #DEBOUNCE
066B 12002E     362            lcall  ?sleep
066E D002       362            pop    AR2
0670 20A718     363       jb           BTN_DOWN, conf_soakTemp_button_state
0673 30A7FD     364       jnb          BTN_DOWN, $
0676 C0E0       365       push    ACC
0678 C000       365       push    AR0
067A            365       ; get second param - how many to subtract
067A 7401       365       mov     a,      #1
067C 14         365       dec     a
067D F8         365       mov     R0,     a
067E 74FF       365       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
0680 98         365       subb    a,      R0
0681 F8         365       mov     R0,     a   ; computed compliment, store in R0
0682 E530       365       mov     a,      soakTemp
0684 28         365       add      a,      R0
0685            365       ; decimal adjust here?
0685 F530       365       mov     soakTemp,     a
0687 D000       365       pop     AR0
0689 D0E0       365       pop     ACC
068B            365   
068B            366   
068B            367   conf_soakTemp_button_state:
068B            368       ; [STATE] save this setting and move on
068B 20A512     369       jb           BTN_STATE, conf_soakTemp_j
068E C002       370            push   AR2
0690 7A32       370            mov    R2,     #DEBOUNCE
0692 12002E     370            lcall  ?sleep
0695 D002       370            pop    AR2
0697 20A506     371       jb           BTN_STATE, conf_soakTemp_j
069A 30A5FD     372       jnb          BTN_STATE, $
069D 0206A3     373       ljmp         conf_soakTime
06A0            374   conf_soakTemp_j:
06A0 0205E7     375            ljmp    conf_soakTemp_update
06A3            376   
06A3            377   ;-------------------------------------;
06A3            378   ; CONFIGURE: Soak Time                     ;
06A3            379   ;-------------------------------------;
06A3            380   conf_soakTime:
06A3            381       ; CHECK: [STATE], [UP], [DOWN]
06A3            382       ; soak time interface
06A3 C0E0       383            push   acc
06A5 7401       383            mov    a,  #1
06A7 14         383            dec    a
06A8 1200C1     383            lcall  ?LCD_cursor_1 ; Select column and row
06AB D0E0       383            pop    acc
06AD C083       384            push   dph
06AF C082       384            push   dpl
06B1 C0E0       384            push   acc
06B3 90037F     384            mov    dptr, #msg_soakTime
06B6 1200B4     384            lcall  ?LCD_print
06B9 D0E0       384            pop    acc
06BB D082       384            pop    dpl
06BD D083       384            pop    dph
06BF C0E0       385            push   acc
06C1 7401       385            mov    a,  #1
06C3 14         385            dec    a
06C4 1200BF     385            lcall  ?LCD_cursor_2 ; Select column and row
06C7 D0E0       385            pop    acc
06C9            385   
06C9 C083       386            push   dph
06CB C082       386            push   dpl
06CD C0E0       386            push   acc
06CF 9003C3     386            mov    dptr, #msg_time
06D2 1200B4     386            lcall  ?LCD_print
06D5 D0E0       386            pop    acc
06D7 D082       386            pop    dpl
06D9 D083       386            pop    dph
06DB            387   conf_soakTime_update:
06DB            388       ; seconds is converted to minutes and seconds BCD
06DB C0E0       389       push    ACC
06DD C002       389       push    AR2
06DF C003       389       push    AR3
06E1            389   
06E1 E531       389            mov     a, soakTime
06E3 75F03C     389       mov          b, #60
06E6 84         389       div          ab                              ; minutes are in a, seconds are in b
06E7            389   
06E7 AAF0       389            mov             R2, b
06E9            389   
06E9 75F00A     389       mov          b, #10
06EC 84         389       div          ab                              ; result is in a, remainder is in b
06ED C0E0       389            push   acc
06EF 7406       389            mov    a,  #6
06F1 14         389            dec    a
06F2 1200BF     389            lcall  ?LCD_cursor_2 ; Select column and row
06F5 D0E0       389            pop    acc
06F7 2430       389       add          a, #0x30
06F9 FB         389       mov          R3, a
06FA C0E0       389            push acc
06FC EB         389            mov a, R3
06FD 12007E     389            lcall ?LCD_write
0700 D0E0       389            pop acc
0702            389   
0702 C0E0       389            push   acc
0704 7407       389            mov    a,  #7
0706 14         389            dec    a
0707 1200BF     389            lcall  ?LCD_cursor_2 ; Select column and row
070A D0E0       389            pop    acc
070C E5F0       389       mov          a, b
070E 2430       389       add          a, #0x30
0710 F5F0       389       mov          b, a
0712 C0E0       389            push acc
0714 E5F0       389            mov a, b
0716 12007E     389            lcall ?LCD_write
0719 D0E0       389            pop acc
071B            389   
071B 75F00A     389       mov          b, #10
071E EA         389       mov          a, R2
071F 84         389       div          ab
0720 C0E0       389            push   acc
0722 7409       389            mov    a,  #9
0724 14         389            dec    a
0725 1200BF     389            lcall  ?LCD_cursor_2 ; Select column and row
0728 D0E0       389            pop    acc
072A 2430       389       add          a, #0x30
072C FB         389       mov          R3, a
072D C0E0       389            push acc
072F EB         389            mov a, R3
0730 12007E     389            lcall ?LCD_write
0733 D0E0       389            pop acc
0735            389   
0735 C0E0       389            push   acc
0737 740A       389            mov    a,  #10
0739 14         389            dec    a
073A 1200BF     389            lcall  ?LCD_cursor_2 ; Select column and row
073D D0E0       389            pop    acc
073F E5F0       389       mov          a, b
0741 2430       389       add          a, #0x30
0743 F5F0       389       mov          b, a
0745 C0E0       389            push acc
0747 E5F0       389            mov a, b
0749 12007E     389            lcall ?LCD_write
074C D0E0       389            pop acc
074E            389   
074E D002       389       pop     AR2
0750 D003       389       pop     AR3
0752            389       ; pop     B
0752 D0E0       389       pop     ACC
0754            390   
0754            391   conf_soakTime_button_up:
0754            392       ; [UP] increment soak time by 5
0754 20A619     393       jb           BTN_UP, conf_soakTime_button_down
0757 C002       394            push   AR2
0759 7A32       394            mov    R2,     #DEBOUNCE
075B 12002E     394            lcall  ?sleep
075E D002       394            pop    AR2
0760 20A60D     395            jb              BTN_UP, conf_soakTime_button_down
0763 30A6FD     396            jnb     BTN_UP, $
0766 C0E0       397       push    ACC
0768 E531       397       mov     a,      soakTime
076A 2405       397       add     a,      #0x05
076C            397       ; TODO do i need decimal adjust here?
076C F531       397       mov     soakTime,     a
076E D0E0       397       pop     ACC
0770            398   
0770            399   conf_soakTime_button_down:
0770            400       ; [DOWN] decrement soak time by 5
0770 20A724     401       jb           BTN_DOWN, conf_soakTime_button_state
0773 C002       402            push   AR2
0775 7A32       402            mov    R2,     #DEBOUNCE
0777 12002E     402            lcall  ?sleep
077A D002       402            pop    AR2
077C 20A718     403            jb              BTN_DOWN, conf_soakTime_button_state
077F 30A7FD     404            jnb     BTN_DOWN, $
0782 C0E0       405       push    ACC
0784 C000       405       push    AR0
0786            405       ; get second param - how many to subtract
0786 7405       405       mov     a,      #0x05
0788 14         405       dec     a
0789 F8         405       mov     R0,     a
078A 74FF       405       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
078C 98         405       subb    a,      R0
078D F8         405       mov     R0,     a   ; computed compliment, store in R0
078E E531       405       mov     a,      soakTime
0790 28         405       add      a,      R0
0791            405       ; decimal adjust here?
0791 F531       405       mov     soakTime,     a
0793 D000       405       pop     AR0
0795 D0E0       405       pop     ACC
0797            406   
0797            407   conf_soakTime_button_state:
0797            408       ; [STATE] save soak time and move on
0797 20A512     409       jb           BTN_STATE, conf_soakTime_j
079A C002       410            push   AR2
079C 7A32       410            mov    R2,     #DEBOUNCE
079E 12002E     410            lcall  ?sleep
07A1 D002       410            pop    AR2
07A3 20A506     411            jb              BTN_STATE, conf_soakTime_j
07A6 30A5FD     412            jnb     BTN_STATE, $
07A9 0207AF     413       ljmp         conf_reflowTemp
07AC            414   
07AC            415   conf_soakTime_j:
07AC 0206DB     416            ljmp    conf_soakTime_update
07AF            417   
07AF            418   ;-------------------------------------;
07AF            419   ; CONFIGURE: Reflow Temperature            ;
07AF            420   ;-------------------------------------;
07AF            421   conf_reflowTemp:
07AF            422       ; CHECK: [STATE], [UP], [DOWN]
07AF            423       ; reflow temperature setting interface
07AF C0E0       424            push   acc
07B1 7401       424            mov    a,  #1
07B3 14         424            dec    a
07B4 1200C1     424            lcall  ?LCD_cursor_1 ; Select column and row
07B7 D0E0       424            pop    acc
07B9 C083       425            push   dph
07BB C082       425            push   dpl
07BD C0E0       425            push   acc
07BF 900390     425            mov    dptr, #msg_reflowTemp
07C2 1200B4     425            lcall  ?LCD_print
07C5 D0E0       425            pop    acc
07C7 D082       425            pop    dpl
07C9 D083       425            pop    dph
07CB C0E0       426            push   acc
07CD 7401       426            mov    a,  #1
07CF 14         426            dec    a
07D0 1200BF     426            lcall  ?LCD_cursor_2 ; Select column and row
07D3 D0E0       426            pop    acc
07D5 C083       427            push   dph
07D7 C082       427            push   dpl
07D9 C0E0       427            push   acc
07DB 9003B2     427            mov    dptr, #msg_temp
07DE 1200B4     427            lcall  ?LCD_print
07E1 D0E0       427            pop    acc
07E3 D082       427            pop    dpl
07E5 D083       427            pop    dph
07E7            428   conf_reflowTemp_update:
07E7 C0E0       429            push   acc
07E9 7407       429            mov    a,  #7
07EB 14         429            dec    a
07EC 1200BF     429            lcall  ?LCD_cursor_2 ; Select column and row
07EF D0E0       429            pop    acc
07F1 C0E0       430       push    ACC
07F3 C001       430       push    AR1
07F5            430   
07F5 E532       430            mov     a, reflowTemp
07F7 75F064     430       mov          b, #100
07FA 84         430       div          ab                              ; result is in a, remainder is in b
07FB C0E0       430            push   acc
07FD 7407       430            mov    a,  #7
07FF 14         430            dec    a
0800 1200BF     430            lcall  ?LCD_cursor_2 ; Select column and row
0803 D0E0       430            pop    acc
0805 2430       430       add          a, #0x30
0807 F9         430       mov          R1, a
0808 C0E0       430            push acc
080A E9         430            mov a, R1
080B 12007E     430            lcall ?LCD_write
080E D0E0       430            pop acc
0810 E5F0       430       mov          a, b
0812 75F00A     430       mov          b, #10
0815 84         430       div          ab
0816 2430       430       add          a, #0x30
0818 F9         430       mov          R1, a
0819 C0E0       430            push   acc
081B 7408       430            mov    a,  #8
081D 14         430            dec    a
081E 1200BF     430            lcall  ?LCD_cursor_2 ; Select column and row
0821 D0E0       430            pop    acc
0823 C0E0       430            push acc
0825 E9         430            mov a, R1
0826 12007E     430            lcall ?LCD_write
0829 D0E0       430            pop acc
082B C0E0       430            push   acc
082D 7409       430            mov    a,  #9
082F 14         430            dec    a
0830 1200BF     430            lcall  ?LCD_cursor_2 ; Select column and row
0833 D0E0       430            pop    acc
0835 E5F0       430       mov          a, b
0837 2430       430       add          a, #0x30
0839 F5F0       430       mov          b, a
083B C0E0       430            push acc
083D E5F0       430            mov a, b
083F 12007E     430            lcall ?LCD_write
0842 D0E0       430            pop acc
0844            430   
0844 C001       430       push    AR1
0846 C0E0       430       push    ACC
0848            431   
0848            432   conf_reflowTemp_button_up:
0848            433       ; [UP]  increment reflow tempreature by 1
0848 20A619     434       jb           BTN_UP, conf_reflowTemp_button_down
084B C002       435            push   AR2
084D 7A32       435            mov    R2,     #DEBOUNCE
084F 12002E     435            lcall  ?sleep
0852 D002       435            pop    AR2
0854 20A60D     436            jb              BTN_UP, conf_reflowTemp_button_down
0857 30A6FD     437            jnb     BTN_UP, $
085A C0E0       438       push    ACC
085C E532       438       mov     a,      reflowTemp
085E 2401       438       add     a,      #1
0860            438       ; TODO do i need decimal adjust here?
0860 F532       438       mov     reflowTemp,     a
0862 D0E0       438       pop     ACC
0864            439   
0864            440   conf_reflowTemp_button_down:
0864            441       ; [DOWN] decrement reflow tempreature by 1
0864 20A724     442       jb           BTN_DOWN, conf_reflowTemp_button_state
0867 C002       443            push   AR2
0869 7A32       443            mov    R2,     #DEBOUNCE
086B 12002E     443            lcall  ?sleep
086E D002       443            pop    AR2
0870 20A718     444            jb              BTN_DOWN, conf_reflowTemp_button_state
0873 30A7FD     445            jnb     BTN_DOWN, $
0876 C0E0       446       push    ACC
0878 C000       446       push    AR0
087A            446       ; get second param - how many to subtract
087A 7401       446       mov     a,      #1
087C 14         446       dec     a
087D F8         446       mov     R0,     a
087E 74FF       446       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
0880 98         446       subb    a,      R0
0881 F8         446       mov     R0,     a   ; computed compliment, store in R0
0882 E532       446       mov     a,      reflowTemp
0884 28         446       add      a,      R0
0885            446       ; decimal adjust here?
0885 F532       446       mov     reflowTemp,     a
0887 D000       446       pop     AR0
0889 D0E0       446       pop     ACC
088B            447   
088B            448   conf_reflowTemp_button_state:
088B            449       ; [STATE] save reflow temperature and move on
088B 20A512     450       jb           BTN_STATE, conf_reflowTemp_j
088E C002       451            push   AR2
0890 7A32       451            mov    R2,     #DEBOUNCE
0892 12002E     451            lcall  ?sleep
0895 D002       451            pop    AR2
0897 20A506     452            jb              BTN_STATE, conf_reflowTemp_j
089A 30A5FD     453            jnb     BTN_STATE, $
089D 0208A3     454       ljmp         conf_reflowTime
08A0            455   
08A0            456   conf_reflowTemp_j:
08A0 0207E7     457            ljmp    conf_reflowTemp_update
08A3            458   
08A3            459   ;-------------------------------------;
08A3            460   ; CONFIGURE: Reflow Time                           ;
08A3            461   ;-------------------------------------;
08A3            462   conf_reflowTime:
08A3            463       ; CHECK: [STATE], [UP], [DOWN]
08A3            464       ; reflow time setting interface
08A3 C0E0       465            push   acc
08A5 7401       465            mov    a,  #1
08A7 14         465            dec    a
08A8 1200C1     465            lcall  ?LCD_cursor_1 ; Select column and row
08AB D0E0       465            pop    acc
08AD C083       466            push   dph
08AF C082       466            push   dpl
08B1 C0E0       466            push   acc
08B3 9003A1     466            mov    dptr, #msg_reflowTime
08B6 1200B4     466            lcall  ?LCD_print
08B9 D0E0       466            pop    acc
08BB D082       466            pop    dpl
08BD D083       466            pop    dph
08BF C0E0       467            push   acc
08C1 7401       467            mov    a,  #1
08C3 14         467            dec    a
08C4 1200BF     467            lcall  ?LCD_cursor_2 ; Select column and row
08C7 D0E0       467            pop    acc
08C9 C083       468            push   dph
08CB C082       468            push   dpl
08CD C0E0       468            push   acc
08CF 9003C3     468            mov    dptr, #msg_time
08D2 1200B4     468            lcall  ?LCD_print
08D5 D0E0       468            pop    acc
08D7 D082       468            pop    dpl
08D9 D083       468            pop    dph
08DB            469   conf_reflowTime_update:
08DB C0E0       470       push    ACC
08DD C002       470       push    AR2
08DF C003       470       push    AR3
08E1            470   
08E1 E533       470            mov     a, reflowTime
08E3 75F03C     470       mov          b, #60
08E6 84         470       div          ab                              ; minutes are in a, seconds are in b
08E7            470   
08E7 AAF0       470            mov             R2, b
08E9            470   
08E9 75F00A     470       mov          b, #10
08EC 84         470       div          ab                              ; result is in a, remainder is in b
08ED C0E0       470            push   acc
08EF 7406       470            mov    a,  #6
08F1 14         470            dec    a
08F2 1200BF     470            lcall  ?LCD_cursor_2 ; Select column and row
08F5 D0E0       470            pop    acc
08F7 2430       470       add          a, #0x30
08F9 FB         470       mov          R3, a
08FA C0E0       470            push acc
08FC EB         470            mov a, R3
08FD 12007E     470            lcall ?LCD_write
0900 D0E0       470            pop acc
0902            470   
0902 C0E0       470            push   acc
0904 7407       470            mov    a,  #7
0906 14         470            dec    a
0907 1200BF     470            lcall  ?LCD_cursor_2 ; Select column and row
090A D0E0       470            pop    acc
090C E5F0       470       mov          a, b
090E 2430       470       add          a, #0x30
0910 F5F0       470       mov          b, a
0912 C0E0       470            push acc
0914 E5F0       470            mov a, b
0916 12007E     470            lcall ?LCD_write
0919 D0E0       470            pop acc
091B            470   
091B 75F00A     470       mov          b, #10
091E EA         470       mov          a, R2
091F 84         470       div          ab
0920 C0E0       470            push   acc
0922 7409       470            mov    a,  #9
0924 14         470            dec    a
0925 1200BF     470            lcall  ?LCD_cursor_2 ; Select column and row
0928 D0E0       470            pop    acc
092A 2430       470       add          a, #0x30
092C FB         470       mov          R3, a
092D C0E0       470            push acc
092F EB         470            mov a, R3
0930 12007E     470            lcall ?LCD_write
0933 D0E0       470            pop acc
0935            470   
0935 C0E0       470            push   acc
0937 740A       470            mov    a,  #10
0939 14         470            dec    a
093A 1200BF     470            lcall  ?LCD_cursor_2 ; Select column and row
093D D0E0       470            pop    acc
093F E5F0       470       mov          a, b
0941 2430       470       add          a, #0x30
0943 F5F0       470       mov          b, a
0945 C0E0       470            push acc
0947 E5F0       470            mov a, b
0949 12007E     470            lcall ?LCD_write
094C D0E0       470            pop acc
094E            470   
094E D002       470       pop     AR2
0950 D003       470       pop     AR3
0952            470       ; pop     B
0952 D0E0       470       pop     ACC
0954            471   
0954            472   conf_reflowTime_button_up:
0954            473       ; [UP]  increase reflow time by 5 seconds
0954 20A619     474       jb           BTN_UP, conf_reflowTime_button_down
0957 C002       475            push   AR2
0959 7A32       475            mov    R2,     #DEBOUNCE
095B 12002E     475            lcall  ?sleep
095E D002       475            pop    AR2
0960 20A60D     476            jb              BTN_UP, conf_reflowTime_button_down
0963 30A6FD     477            jnb     BTN_UP, $
0966 C0E0       478       push    ACC
0968 E533       478       mov     a,      reflowTime
096A 2405       478       add     a,      #0x05
096C            478       ; TODO do i need decimal adjust here?
096C F533       478       mov     reflowTime,     a
096E D0E0       478       pop     ACC
0970            479   
0970            480   conf_reflowTime_button_down:
0970            481       ; [UP]  decrease reflow time by 5 seconds
0970 20A724     482       jb           BTN_DOWN, conf_reflowTime_button_state
0973 C002       483            push   AR2
0975 7A32       483            mov    R2,     #DEBOUNCE
0977 12002E     483            lcall  ?sleep
097A D002       483            pop    AR2
097C 20A718     484            jb              BTN_DOWN, conf_reflowTime_button_state
097F 30A7FD     485            jnb     BTN_DOWN, $
0982 C0E0       486       push    ACC
0984 C000       486       push    AR0
0986            486       ; get second param - how many to subtract
0986 7405       486       mov     a,      #0x05
0988 14         486       dec     a
0989 F8         486       mov     R0,     a
098A 74FF       486       mov     a,      #0xFF ; 0xFF is -1, oxFB is -5
098C 98         486       subb    a,      R0
098D F8         486       mov     R0,     a   ; computed compliment, store in R0
098E E533       486       mov     a,      reflowTime
0990 28         486       add      a,      R0
0991            486       ; decimal adjust here?
0991 F533       486       mov     reflowTime,     a
0993 D000       486       pop     AR0
0995 D0E0       486       pop     ACC
0997            487   
0997            488   conf_reflowTime_button_state:
0997            489       ; [STATE] save reflow time and move on
0997 20A512     490       jb           BTN_STATE, conf_reflowTime_j
099A C002       491            push   AR2
099C 7A32       491            mov    R2,     #DEBOUNCE
099E 12002E     491            lcall  ?sleep
09A1 D002       491            pop    AR2
09A3 20A506     492            jb              BTN_STATE, conf_reflowTime_j
09A6 30A5FD     493            jnb     BTN_STATE, $
09A9 0204F9     494       ljmp         main
09AC            495   
09AC            496   conf_reflowTime_j:
09AC 0208DB     497            ljmp    conf_reflowTime_update
09AF            498   
09AF            499   ;------------------------------;
09AF            500   ;                FUNCTION CALLS             ;
09AF            501   ;------------------------------;
09AF            502   ; increment soak time by 5 seconds
09AF            503   ; inc_soak_time:
09AF            504   ;        mov     a, soakTime
09AF            505   ;     add                a, #0x05
09AF            506   ;     mov                soakTime, a
09AF            507   ;        ret
09AF            508   ;
09AF            509   ; ; decrement soak time by 5 seconds
09AF            510   ; dec_soak_time:
09AF            511   ;        mov             a, soakTime
09AF            512   ;     add                a, #0xFB
09AF            513   ;     mov                soakTime, a
09AF            514   ;        ret
09AF            515   ;
09AF            516   ; inc_reflow_time:
09AF            517   ;     mov        a, reflowTime
09AF            518   ;     add                a, #0x05
09AF            519   ;     mov                reflowTime, a
09AF            520   ;        ret
09AF            521   ;
09AF            522   ; dec_reflow_time:
09AF            523   ;        mov     a, reflowTime
09AF            524   ;     add                a, #0xFB
09AF            525   ;     mov                reflowTime, a
09AF            526   ;        ret
09AF            527   
09AF            528   ; === END OF PROGRAM ===
09AF            529   END
